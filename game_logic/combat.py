"""
–ü–û–ö–†–ê–©–ï–ù–ê –ë–û–ô–û–í–ê –°–ò–°–¢–ï–ú–ê V2.0 –∑ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º
Telegram RPG Bot "–õ–µ–≥–µ–Ω–¥–∏ –í–∞–ª–≥–∞–ª–ª—ñ—ó"
"""

import random
import logging
import asyncio
from typing import Dict, Any, List, Optional, Tuple
from enum import Enum
from dataclasses import dataclass
from database.database_models import Character
from game_logic.character import CharacterManager
from game_logic.items import ItemType
from game_logic.enemies import Enemy, EnemyAbilities

logger = logging.getLogger(__name__)


class CombatAction(Enum):
    """Available combat actions"""
    ATTACK = "attack"
    DEFEND = "defend" 
    MAGIC_ATTACK = "magic_attack"
    USE_ITEM = "use_item"
    FLEE = "flee"
    SPECIAL_ABILITY = "special_ability"


class CombatResult(Enum):
    """Combat outcomes"""
    VICTORY = "victory"
    DEFEAT = "defeat"
    FLEE_SUCCESS = "flee_success"
    FLEE_FAILED = "flee_failed"
    ONGOING = "ongoing"


@dataclass
class CombatTurn:
    """Data for a single combat turn"""
    actor_name: str
    action: CombatAction
    target_name: str
    damage_dealt: int = 0
    damage_taken: int = 0
    is_critical: bool = False
    is_blocked: bool = False
    is_missed: bool = False
    special_effect: str = ""
    message: str = ""


@dataclass
class CombatState:
    """Current state of combat"""
    character: Character
    enemy: Enemy
    turn_number: int = 0
    character_effects: Dict[str, Dict] = None
    enemy_effects: Dict[str, Dict] = None
    combat_log: List[CombatTurn] = None
    
    def __post_init__(self):
        if self.character_effects is None:
            self.character_effects = {}
        if self.enemy_effects is None:
            self.enemy_effects = {}
        if self.combat_log is None:
            self.combat_log = []


class BalancedCombatSystem:
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∞ –±–æ–π–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self):
        # –ù–æ–≤–∞ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ —É—Ä–æ–Ω—É
        self.damage_config = {
            'base_multiplier': 0.85,
            'defense_efficiency': 0.6, 
            'minimum_damage_ratio': 0.2,
            'maximum_damage_reduction': 0.8,
            'variance': 0.15,
            'critical_multiplier': 1.75,
            'magic_defense_penetration': 0.5
        }
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –±–æ—é
        self.FLEE_BASE_CHANCE = 0.5
    
    def calculate_balanced_damage(self, attacker_power: int, defender_defense: int, 
                                is_critical: bool = False, is_magic: bool = False) -> int:
        """–ù–æ–≤–∞ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —É—Ä–æ–Ω—É"""
        
        # –ú–∞–≥—ñ—è —ñ–≥–Ω–æ—Ä—É—î —á–∞—Å—Ç–∏–Ω—É –∑–∞—Ö–∏—Å—Ç—É
        if is_magic:
            effective_defense = defender_defense * self.damage_config['magic_defense_penetration']
        else:
            effective_defense = defender_defense
        
        # –û—Å–Ω–æ–≤–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞
        base_damage = (attacker_power * self.damage_config['base_multiplier'] - 
                      effective_defense * self.damage_config['defense_efficiency'])
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —É—Ä–æ–Ω (–∑–∞–≤–∂–¥–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–µ–≤–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫)
        minimum_damage = attacker_power * self.damage_config['minimum_damage_ratio']
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –º—ñ–Ω—ñ–º—É–º
        final_damage = max(base_damage, minimum_damage)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è —É—Ä–æ–Ω—É
        max_reduced_damage = attacker_power * (1 - self.damage_config['maximum_damage_reduction'])
        final_damage = max(final_damage, max_reduced_damage)
        
        # –í–∞—Ä—ñ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å
        variance = random.uniform(1 - self.damage_config['variance'], 
                                1 + self.damage_config['variance'])
        final_damage *= variance
        
        # –ö—Ä–∏—Ç–∏—á–Ω–∏–π —É—Ä–æ–Ω  
        if is_critical:
            final_damage *= self.damage_config['critical_multiplier']
        
        return max(1, int(final_damage))
    
    def scale_enemy_for_player(self, base_enemy: Dict, character: Character, 
                             location_difficulty: str = 'dungeon_floor_1') -> Enemy:
        """–ú–∞—Å—à—Ç–∞–±—É—î –≤–æ—Ä–æ–≥–∞ –ø—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –¥–ª—è –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ–≥–æ –±–æ—é"""
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è
        from game_logic.character import CharacterManager
        char_manager = CharacterManager(None)
        player_stats = char_manager.get_total_stats(character)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∏–ª—É –≥—Ä–∞–≤—Ü—è
        player_power = self._calculate_player_power(player_stats, character.level)
        
        # –ú–Ω–æ–∂–Ω–∏–∫–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ª–æ–∫–∞—Ü—ñ–π
        location_multipliers = {
            'forest_easy': 0.8,
            'forest_normal': 1.0,
            'dungeon_floor_1': 1.1,
            'dungeon_floor_2': 1.25, 
            'dungeon_floor_3': 1.4,
            'arena': 1.3,
            'boss': 1.8
        }
        
        location_mult = location_multipliers.get(location_difficulty, 1.1)
        
        # –¶—ñ–ª—å–æ–≤–∞ —Å–∏–ª–∞ –≤–æ—Ä–æ–≥–∞ (85% –≤—ñ–¥ —Å–∏–ª–∏ –≥—Ä–∞–≤—Ü—è –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º –ª–æ–∫–∞—Ü—ñ—ó)
        target_enemy_power = player_power * 0.85 * location_mult
        
        # –†—ñ–≤–µ–Ω—å –≤–æ—Ä–æ–≥–∞
        enemy_level = max(1, character.level + random.randint(-1, 1))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ–≥–æ –≤–æ—Ä–æ–≥–∞
        scaled_enemy = Enemy(
            enemy_id=base_enemy.get('enemy_id', 'scaled_enemy'),
            name=base_enemy.get('name', '–ú–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∏–π –≤–æ—Ä–æ–≥'),
            description=base_enemy.get('description', ''),
            level=enemy_level,
            enemy_type=base_enemy.get('enemy_type', 'dungeon'),
            behavior=base_enemy.get('behavior', 'balanced'),
            
            # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Å–∏–ª—É –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
            max_health=int(target_enemy_power * 0.35),
            attack=int(target_enemy_power * 0.4),
            defense=int(target_enemy_power * 0.25),
            
            # –Ü–Ω—à—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            speed=base_enemy.get('speed', 10) + enemy_level,
            critical_chance=base_enemy.get('critical_chance', 5),
            block_chance=base_enemy.get('block_chance', 10),
            
            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–ø—ñ—Ä
            special_abilities=base_enemy.get('special_abilities', []),
            magic_resistance=base_enemy.get('magic_resistance', 0),
            physical_resistance=base_enemy.get('physical_resistance', 0),
            
            # –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            experience_reward=self._calculate_experience_reward(enemy_level, character.level, location_mult),
            gold_min=int(enemy_level * 12 * location_mult * 0.8),
            gold_max=int(enemy_level * 12 * location_mult * 1.2),
            drop_table=base_enemy.get('drop_table', []),
            emoji=base_enemy.get('emoji', 'üëπ')
        )
        
        # –ö–æ—Ä–µ–∫—Ü—ñ—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≤–æ—Ä–æ–≥—ñ–≤
        behavior = base_enemy.get('behavior', 'balanced')
        
        if behavior == 'aggressive':
            scaled_enemy.attack = int(scaled_enemy.attack * 1.2)
            scaled_enemy.defense = int(scaled_enemy.defense * 0.85)
            scaled_enemy.max_health = int(scaled_enemy.max_health * 0.85)
        elif behavior == 'defensive':
            scaled_enemy.defense = int(scaled_enemy.defense * 1.2)
            scaled_enemy.max_health = int(scaled_enemy.max_health * 1.2)
            scaled_enemy.attack = int(scaled_enemy.attack * 0.85)
        elif behavior == 'berserker':
            scaled_enemy.attack = int(scaled_enemy.attack * 1.3)
            scaled_enemy.defense = int(scaled_enemy.defense * 0.8)
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        scaled_enemy.max_health = max(20, scaled_enemy.max_health)
        scaled_enemy.attack = max(5, scaled_enemy.attack)
        scaled_enemy.defense = max(1, scaled_enemy.defense)
        scaled_enemy.health = scaled_enemy.max_health
        
        logger.info(f"Scaled enemy {scaled_enemy.name} for player level {character.level}: "
                   f"HP={scaled_enemy.max_health}, ATK={scaled_enemy.attack}, DEF={scaled_enemy.defense}")
        
        return scaled_enemy
    
    def _calculate_player_power(self, player_stats: Dict, level: int) -> int:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É –±–æ–π–æ–≤—É —Å–∏–ª—É –≥—Ä–∞–≤—Ü—è"""
        
        attack = player_stats.get('attack', 10)
        defense = player_stats.get('defense', 5)
        max_health = player_stats.get('max_health', 100) 
        speed = player_stats.get('speed', 10)
        crit_chance = player_stats.get('critical_chance', 5)
        
        power = (
            level * 20 +           # –ë–∞–∑–æ–≤–∞ —Å–∏–ª–∞ –≤—ñ–¥ —Ä—ñ–≤–Ω—è
            attack * 8 +           # –ê—Ç–∞–∫–∞ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞
            defense * 6 +          # –ó–∞—Ö–∏—Å—Ç –≤–∞–∂–ª–∏–≤–∏–π  
            max_health * 0.4 +     # –ó–¥–æ—Ä–æ–≤'—è
            speed * 2 +            # –®–≤–∏–¥–∫—ñ—Å—Ç—å
            crit_chance * 3        # –ö—Ä–∏—Ç–∏—á–Ω–∏–π —à–∞–Ω—Å
        )
        
        return int(power)
    
    def _calculate_experience_reward(self, enemy_level: int, player_level: int, 
                                   difficulty_mult: float) -> int:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –¥–æ—Å–≤—ñ–¥ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–∑–Ω–∏—Ü—ñ —Ä—ñ–≤–Ω—ñ–≤"""
        base_exp = enemy_level * 25
        
        level_diff = enemy_level - player_level
        if level_diff <= -2:
            level_mult = 0.5
        elif level_diff <= 0:
            level_mult = 0.8
        elif level_diff <= 2:
            level_mult = 1.0
        else:
            level_mult = 1.2
        
        return int(base_exp * level_mult * difficulty_mult)


class CombatManager:
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ–π–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑ –±–∞–ª–∞–Ω—Å–æ–º"""
    
    def __init__(self, character_manager: CharacterManager = None, item_manager = None):
        self.character_manager = character_manager or CharacterManager(None)
        self._item_manager = item_manager
        self._enemy_manager = None
        self.balance_system = BalancedCombatSystem()
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –±–æ—é
        self.FLEE_BASE_CHANCE = 0.5
    
    @property
    def item_manager(self):
        """Lazy initialization of ItemManager"""
        if self._item_manager is None:
            from game_logic.items import ItemManager
            self._item_manager = ItemManager()
        return self._item_manager
    
    @property  
    def enemy_manager(self):
        """Lazy initialization of EnemyManager"""
        if self._enemy_manager is None:
            from game_logic.enemies import EnemyManager
            self._enemy_manager = EnemyManager()
        return self._enemy_manager
    
    async def start_combat(self, character: Character, enemy: Enemy, 
                          auto_combat: bool = False, location_difficulty: str = 'dungeon_floor_1') -> Dict[str, Any]:
        """–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –±—ñ–π"""
        
        # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –≤–æ—Ä–æ–≥–∞ –ø—ñ–¥ –≥—Ä–∞–≤—Ü—è –¥–ª—è –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ–≥–æ –±–æ—é
        if hasattr(enemy, 'enemy_id'):
            base_enemy_data = {
                'enemy_id': enemy.enemy_id,
                'name': enemy.name, 
                'description': enemy.description,
                'enemy_type': enemy.enemy_type.value if hasattr(enemy.enemy_type, 'value') else 'dungeon',
                'behavior': enemy.behavior.value if hasattr(enemy.behavior, 'value') else 'balanced',
                'speed': enemy.speed,
                'critical_chance': enemy.critical_chance,
                'block_chance': enemy.block_chance,
                'special_abilities': enemy.special_abilities,
                'magic_resistance': enemy.magic_resistance,
                'physical_resistance': enemy.physical_resistance,
                'drop_table': enemy.drop_table,
                'emoji': enemy.emoji
            }
            
            balanced_enemy = self.balance_system.scale_enemy_for_player(
                base_enemy_data, character, location_difficulty
            )
        else:
            balanced_enemy = enemy
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –±–æ—é
        combat_state = CombatState(character, balanced_enemy)
        
        logger.info(f"Balanced combat started: {character.name} vs {balanced_enemy.name}")
        
        # –¶–∏–∫–ª –±–æ—é
        while True:
            combat_state.turn_number += 1
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ—é
            if not character.is_alive():
                return self._end_combat(combat_state, CombatResult.DEFEAT)
            
            if not balanced_enemy.is_alive():
                return self._end_combat(combat_state, CombatResult.VICTORY)
            
            # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ–º—É –±–æ—é
            if combat_state.turn_number > 50:
                logger.warning(f"Combat timeout after {combat_state.turn_number} turns")
                return self._end_combat(combat_state, CombatResult.DEFEAT)
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –µ—Ñ–µ–∫—Ç–∏ —Ö–æ–¥—É
            self._process_turn_effects(combat_state)
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥—ñ–≤ –ø–æ —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            char_stats = self.character_manager.get_total_stats(character)
            char_speed = char_stats['speed']
            enemy_speed = balanced_enemy.speed
            
            if auto_combat:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –±—ñ–π
                if char_speed >= enemy_speed:
                    await self._player_auto_turn(combat_state)
                    if balanced_enemy.is_alive():
                        await self._enemy_turn(combat_state)
                else:
                    await self._enemy_turn(combat_state)
                    if character.is_alive():
                        await self._player_auto_turn(combat_state)
            else:
                # –†—É—á–Ω–∏–π –±—ñ–π - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –≤–≤–æ–¥—É –≥—Ä–∞–≤—Ü—è
                combat_state.next_actor = 'player' if char_speed >= enemy_speed else 'enemy'
                return {
                    'result': CombatResult.ONGOING,
                    'state': combat_state,
                    'next_turn': combat_state.next_actor,
                    'options': self._get_combat_options(combat_state)
                }
    
    async def process_player_action(self, combat_state: CombatState, action: CombatAction, 
                                  target: str = None, item_id: str = None) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–∏—Ç–∏ –¥—ñ—é –≥—Ä–∞–≤—Ü—è"""
        
        if action == CombatAction.ATTACK:
            turn = await self._player_attack(combat_state, False)
        elif action == CombatAction.MAGIC_ATTACK:
            turn = await self._player_attack(combat_state, True)
        elif action == CombatAction.DEFEND:
            turn = await self._player_defend(combat_state)
        elif action == CombatAction.USE_ITEM:
            turn = await self._player_use_item(combat_state, item_id)
        elif action == CombatAction.FLEE:
            return await self._player_flee(combat_state)
        else:
            turn = CombatTurn("", CombatAction.ATTACK, "", message="–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è!")
        
        combat_state.combat_log.append(turn)
        
        # –•—ñ–¥ –≤–æ—Ä–æ–≥–∞, —è–∫—â–æ –≤—ñ–Ω —â–µ –∂–∏–≤–∏–π
        if combat_state.enemy.is_alive() and combat_state.character.is_alive():
            enemy_turn = await self._enemy_turn(combat_state)
            combat_state.combat_log.append(enemy_turn)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ—é
        if not combat_state.character.is_alive():
            return self._end_combat(combat_state, CombatResult.DEFEAT)
        elif not combat_state.enemy.is_alive():
            return self._end_combat(combat_state, CombatResult.VICTORY)
        
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±—ñ–π
        return {
            'result': CombatResult.ONGOING,
            'state': combat_state,
            'last_turns': combat_state.combat_log[-2:],
            'options': self._get_combat_options(combat_state)
        }
    
    async def _player_attack(self, combat_state: CombatState, is_magic_attack: bool = False) -> CombatTurn:
        """–û–±—Ä–æ–±–∏—Ç–∏ –∞—Ç–∞–∫—É –≥—Ä–∞–≤—Ü—è –∑ –Ω–æ–≤–æ—é —Ñ–æ—Ä–º—É–ª–æ—é —É—Ä–æ–Ω—É"""
        character = combat_state.character
        enemy = combat_state.enemy
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        total_stats = self.character_manager.get_total_stats(character)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–∏–ª—É –∞—Ç–∞–∫–∏
        if is_magic_attack and total_stats['magic_power'] > 0:
            attack_power = total_stats['magic_power']
            action_type = CombatAction.MAGIC_ATTACK
        else:
            attack_power = total_stats['attack']
            action_type = CombatAction.ATTACK
            is_magic_attack = False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω–∏–π —É–¥–∞—Ä
        crit_chance = total_stats['critical_chance']
        is_critical = random.randint(1, 100) <= crit_chance
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —É—Ä–æ–Ω –∑–∞ –Ω–æ–≤–æ—é —Ñ–æ—Ä–º—É–ª–æ—é
        damage = self.balance_system.calculate_balanced_damage(
            attack_power, enemy.defense, is_critical, is_magic_attack
        )
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —É—Ä–æ–Ω –¥–æ –≤–æ—Ä–æ–≥–∞
        actual_damage = enemy.take_damage(damage, "magic" if is_magic_attack else "physical")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Ö–æ–¥—É
        turn = CombatTurn(
            actor_name=character.name,
            action=action_type,
            target_name=enemy.name,
            damage_dealt=actual_damage,
            is_critical=is_critical
        )
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if is_critical:
            turn.message = f"üí• **–ö–†–ò–¢–ò–ß–ù–ò–ô –£–î–ê–†!** {character.name} –∑–∞–≤–¥–∞—î {actual_damage} —É—Ä–æ–Ω—É!"
        elif is_magic_attack:
            turn.message = f"üîÆ {character.name} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞–≥—ñ—á–Ω—É –∞—Ç–∞–∫—É —Ç–∞ –∑–∞–≤–¥–∞—î {actual_damage} —É—Ä–æ–Ω—É!"
        else:
            turn.message = f"‚öîÔ∏è {character.name} –∞—Ç–∞–∫—É—î —Ç–∞ –∑–∞–≤–¥–∞—î {actual_damage} —É—Ä–æ–Ω—É!"
        
        return turn
    
    async def _player_defend(self, combat_state: CombatState) -> CombatTurn:
        """–û–±—Ä–æ–±–∏—Ç–∏ –∑–∞—Ö–∏—Å—Ç –≥—Ä–∞–≤—Ü—è"""
        character = combat_state.character
        
        # –î–æ–¥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –±–æ–Ω—É—Å –¥–æ –∑–∞—Ö–∏—Å—Ç—É
        self._add_effect(combat_state.character_effects, 'defense_stance', {
            'type': 'defense_bonus',
            'value': 10,
            'duration': 1
        })
        
        return CombatTurn(
            actor_name=character.name,
            action=CombatAction.DEFEND,
            target_name=character.name,
            message=f"üõ°Ô∏è {character.name} –∑–∞–π–º–∞—î –æ–±–æ—Ä–æ–Ω–Ω—É –ø–æ–∑–∏—Ü—ñ—é (+10 –∑–∞—Ö–∏—Å—Ç—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–æ–¥—É)!"
        )
    
    async def _player_use_item(self, combat_state: CombatState, item_id: str) -> CombatTurn:
        """–û–±—Ä–æ–±–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        character = combat_state.character
        
        if not item_id:
            return CombatTurn(
                actor_name=character.name,
                action=CombatAction.USE_ITEM,
                target_name=character.name,
                message="‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –≤–∫–∞–∑–∞–Ω–æ!"
            )
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–µ–¥–º–µ—Ç
        result = self.character_manager.use_consumable_item(character, item_id)
        
        return CombatTurn(
            actor_name=character.name,
            action=CombatAction.USE_ITEM,
            target_name=character.name,
            message=result[1] if result[0] else f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: {result[1]}"
        )
    
    async def _player_flee(self, combat_state: CombatState) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–∏—Ç–∏ —Å–ø—Ä–æ–±—É –≤—Ç–µ—á—ñ"""
        character = combat_state.character
        enemy = combat_state.enemy
        
        total_stats = self.character_manager.get_total_stats(character)
        char_speed = total_stats['speed']
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —à–∞–Ω—Å –≤—Ç–µ—á—ñ
        flee_chance = self._calculate_flee_chance(char_speed, enemy.speed)
        success = random.random() < flee_chance
        
        turn = CombatTurn(
            actor_name=character.name,
            action=CombatAction.FLEE,
            target_name="",
            message=f"üí® {character.name} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤—Ç–µ–∫—Ç–∏..."
        )
        
        combat_state.combat_log.append(turn)
        
        if success:
            return self._end_combat(combat_state, CombatResult.FLEE_SUCCESS)
        else:
            turn.message += " –∞–ª–µ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –≤—Ç–µ–∫—Ç–∏!"
            enemy_turn = await self._enemy_turn(combat_state)
            combat_state.combat_log.append(enemy_turn)
            
            if not character.is_alive():
                return self._end_combat(combat_state, CombatResult.DEFEAT)
            
            return {
                'result': CombatResult.ONGOING,
                'state': combat_state,
                'flee_failed': True,
                'options': self._get_combat_options(combat_state)
            }
    
    async def _player_auto_turn(self, combat_state: CombatState) -> CombatTurn:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ–π"""
        character = combat_state.character
        total_stats = self.character_manager.get_total_stats(character)
        
        if total_stats['magic_power'] > total_stats['attack']:
            return await self._player_attack(combat_state, True)
        else:
            return await self._player_attack(combat_state, False)
    
    async def _enemy_turn(self, combat_state: CombatState) -> CombatTurn:
        """–û–±—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥ –≤–æ—Ä–æ–≥–∞"""
        character = combat_state.character
        enemy = combat_state.enemy
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤–∏–Ω–µ–Ω –≤–æ—Ä–æ–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –∑–¥—ñ–±–Ω—ñ—Å—Ç—å
        if enemy.special_abilities and enemy.should_use_ability():
            return await self._enemy_special_ability(combat_state)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø—Ä–æ–±—É –±–ª–æ–∫—É –≤–æ—Ä–æ–≥–∞
        if random.randint(1, 100) <= enemy.block_chance:
            return self._enemy_defend(combat_state)
        
        # –ó–≤–∏—á–∞–π–Ω–∞ –∞—Ç–∞–∫–∞
        return await self._enemy_attack(combat_state)
    
    async def _enemy_attack(self, combat_state: CombatState) -> CombatTurn:
        """–û–±—Ä–æ–±–∏—Ç–∏ –∞—Ç–∞–∫—É –≤–æ—Ä–æ–≥–∞ –∑ –Ω–æ–≤–æ—é —Ñ–æ—Ä–º—É–ª–æ—é —É—Ä–æ–Ω—É"""
        character = combat_state.character
        enemy = combat_state.enemy
        total_stats = self.character_manager.get_total_stats(character)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–ª–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        block_chance = total_stats['block_chance']
        is_blocked = random.randint(1, 100) <= block_chance
        
        if is_blocked:
            return CombatTurn(
                actor_name=enemy.name,
                action=CombatAction.ATTACK,
                target_name=character.name,
                is_blocked=True,
                message=f"üõ°Ô∏è {character.name} –±–ª–æ–∫—É—î –∞—Ç–∞–∫—É {enemy.name}!"
            )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω–∏–π —É–¥–∞—Ä –≤–æ—Ä–æ–≥–∞
        is_critical = random.randint(1, 100) <= enemy.critical_chance
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —É—Ä–æ–Ω –∑–∞ –Ω–æ–≤–æ—é —Ñ–æ—Ä–º—É–ª–æ—é
        damage = self.balance_system.calculate_balanced_damage(
            enemy.attack, total_stats['defense'], is_critical, False
        )
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —É—Ä–æ–Ω –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self._damage_character(character, damage)
        
        turn = CombatTurn(
            actor_name=enemy.name,
            action=CombatAction.ATTACK,
            target_name=character.name,
            damage_dealt=damage,
            is_critical=is_critical
        )
        
        if is_critical:
            turn.message = f"üí• **–ö–†–ò–¢–ò–ß–ù–ò–ô –£–î–ê–†!** {enemy.name} –∑–∞–≤–¥–∞—î {damage} —É—Ä–æ–Ω—É!"
        else:
            turn.message = f"üëπ {enemy.name} –∑–∞–≤–¥–∞—î {damage} —É—Ä–æ–Ω—É!"
        
        return turn
    
    def _enemy_defend(self, combat_state: CombatState) -> CombatTurn:
        """–û–±—Ä–æ–±–∏—Ç–∏ –∑–∞—Ö–∏—Å—Ç –≤–æ—Ä–æ–≥–∞"""
        enemy = combat_state.enemy
        
        self._add_effect(combat_state.enemy_effects, 'defense_stance', {
            'type': 'defense_bonus',
            'value': 8,
            'duration': 1
        })
        
        return CombatTurn(
            actor_name=enemy.name,
            action=CombatAction.DEFEND,
            target_name=enemy.name,
            message=f"üõ°Ô∏è {enemy.name} –∑–∞–π–º–∞—î –æ–±–æ—Ä–æ–Ω–Ω—É –ø–æ–∑–∏—Ü—ñ—é!"
        )
    
    async def _enemy_special_ability(self, combat_state: CombatState) -> CombatTurn:
        """–û–±—Ä–æ–±–∏—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –∑–¥—ñ–±–Ω—ñ—Å—Ç—å –≤–æ—Ä–æ–≥–∞"""
        enemy = combat_state.enemy
        character = combat_state.character
        
        if not enemy.special_abilities:
            return await self._enemy_attack(combat_state)
        
        ability = random.choice(enemy.special_abilities)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–¥—ñ–±–Ω—ñ—Å—Ç—å (—Å–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)
        if ability == "poison_bite":
            damage = self.balance_system.calculate_balanced_damage(
                enemy.attack + 5, 0, False, False  # –û—Ç—Ä—É–π–Ω–∞ –∞—Ç–∞–∫–∞ —ñ–≥–Ω–æ—Ä—É—î –∑–∞—Ö–∏—Å—Ç
            )
            self._damage_character(character, damage)
            self._add_effect(combat_state.character_effects, 'poison', {
                'type': 'damage_over_time',
                'value': 3,
                'duration': 3
            })
            message = f"‚ò†Ô∏è {enemy.name} –∫—É—Å–∞—î –æ—Ç—Ä—É–π–Ω–∏–º–∏ –∑—É–±–∞–º–∏! {damage} —É—Ä–æ–Ω—É + –æ—Ç—Ä—É—î–Ω–Ω—è!"
        
        elif ability == "regeneration":
            heal_amount = enemy.max_health // 10
            enemy.heal(heal_amount)
            message = f"üíö {enemy.name} —Ä–µ–≥–µ–Ω–µ—Ä—É—î {heal_amount} –∑–¥–æ—Ä–æ–≤'—è!"
        
        else:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∑–≤–∏—á–∞–π–Ω–∞ –∞—Ç–∞–∫–∞
            return await self._enemy_attack(combat_state)
        
        return CombatTurn(
            actor_name=enemy.name,
            action=CombatAction.SPECIAL_ABILITY,
            target_name=character.name,
            special_effect=ability,
            message=message
        )
    
    def _damage_character(self, character: Character, damage: int):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —É—Ä–æ–Ω –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        character.health = max(0, character.health - damage)
    
    def _calculate_flee_chance(self, character_speed: int, enemy_speed: int) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —à–∞–Ω—Å —É—Å–ø—ñ—à–Ω–æ—ó –≤—Ç–µ—á—ñ"""
        speed_diff = character_speed - enemy_speed
        flee_chance = self.FLEE_BASE_CHANCE + (speed_diff * 0.02)
        return max(0.1, min(0.9, flee_chance))
    
    def _process_turn_effects(self, combat_state: CombatState):
        """–û–±—Ä–æ–±–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ (–æ—Ç—Ä—É—î–Ω–Ω—è, –±–∞—Ñ–∏ —Ç–æ—â–æ)"""
        # –û–±—Ä–æ–±–ª—è—î–º–æ –µ—Ñ–µ–∫—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        for effect_id, effect in list(combat_state.character_effects.items()):
            if effect['type'] == 'damage_over_time':
                damage = effect['value']
                self._damage_character(combat_state.character, damage)
            
            effect['duration'] -= 1
            if effect['duration'] <= 0:
                del combat_state.character_effects[effect_id]
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –µ—Ñ–µ–∫—Ç–∏ –≤–æ—Ä–æ–≥–∞  
        for effect_id, effect in list(combat_state.enemy_effects.items()):
            if effect['type'] == 'damage_over_time':
                damage = effect['value']
                combat_state.enemy.take_damage(damage)
            
            effect['duration'] -= 1
            if effect['duration'] <= 0:
                del combat_state.enemy_effects[effect_id]
    
    def _add_effect(self, effects: Dict[str, Dict], effect_id: str, effect_data: Dict):
        """–î–æ–¥–∞—Ç–∏ –µ—Ñ–µ–∫—Ç –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –µ—Ñ–µ–∫—Ç—ñ–≤"""
        effects[effect_id] = effect_data
    
    def _get_combat_options(self, combat_state: CombatState) -> List[Dict[str, str]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó –±–æ—é –¥–ª—è –≥—Ä–∞–≤—Ü—è"""
        total_stats = self.character_manager.get_total_stats(combat_state.character)
        
        options = [
            {'id': 'attack', 'name': '‚öîÔ∏è –ê—Ç–∞–∫—É–≤–∞—Ç–∏', 'description': '–§—ñ–∑–∏—á–Ω–∞ –∞—Ç–∞–∫–∞'},
            {'id': 'defend', 'name': 'üõ°Ô∏è –ó–∞—Ö–∏—â–∞—Ç–∏—Å—è', 'description': '+10 –∑–∞—Ö–∏—Å—Ç—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥'},
            {'id': 'flee', 'name': 'üí® –í—Ç–µ–∫—Ç–∏', 'description': '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—Ç–µ–∫—Ç–∏ –∑ –±–æ—é'}
        ]
        
        # –î–æ–¥–∞—î–º–æ –º–∞–≥—ñ—á–Ω—É –∞—Ç–∞–∫—É —è–∫—â–æ —î –º–∞–≥—ñ—á–Ω–∞ —Å–∏–ª–∞
        if total_stats['magic_power'] > 0:
            options.insert(1, {
                'id': 'magic_attack',
                'name': 'üîÆ –ú–∞–≥—ñ—á–Ω–∞ –∞—Ç–∞–∫–∞', 
                'description': '–Ü–≥–Ω–æ—Ä—É—î —á–∞—Å—Ç–∏–Ω—É –∑–∞—Ö–∏—Å—Ç—É'
            })
        
        # –î–æ–¥–∞—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞
        options.insert(-1, {
            'id': 'use_item',
            'name': 'üéí –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç',
            'description': '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑—ñ–ª–ª—è –∞–±–æ —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç'
        })
        
        return options
    
    def _end_combat(self, combat_state: CombatState, result: CombatResult) -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–π —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"""
        character = combat_state.character
        enemy = combat_state.enemy
        
        combat_result = {
            'result': result,
            'turn_count': combat_state.turn_number,
            'combat_log': combat_state.combat_log,
            'character_health': character.health,
            'enemy_health': enemy.health,
            'experience_gained': 0,
            'gold_gained': 0,
            'items_dropped': [],
            'level_up': False
        }
        
        if result == CombatResult.VICTORY:
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏
            combat_result['experience_gained'] = enemy.experience_reward
            combat_result['gold_gained'] = random.randint(enemy.gold_min, enemy.gold_max)
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏–ø–∞–¥–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
            if enemy.drop_table:
                dropped_items = self.enemy_manager.calculate_loot_drops(enemy)
                combat_result['items_dropped'] = dropped_items
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character.gold += combat_result['gold_gained']
            
            # –î–æ–¥–∞—î–º–æ –¥–æ—Å–≤—ñ–¥ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
            exp_result = self.character_manager.add_experience(character, combat_result['experience_gained'])
            combat_result.update(exp_result)
            
            logger.info(f"Combat victory: {character.name} defeats {enemy.name}")
        
        elif result == CombatResult.DEFEAT:
            logger.info(f"Combat defeat: {character.name} defeated by {enemy.name}")
        
        elif result == CombatResult.FLEE_SUCCESS:
            logger.info(f"Combat fled: {character.name} escapes from {enemy.name}")
        
        return combat_result
    
    def get_combat_summary(self, combat_result: Dict[str, Any]) -> str:
        """–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —Ä–µ–∑—é–º–µ –±–æ—é"""
        result_type = combat_result['result']
        
        if result_type == CombatResult.VICTORY:
            lines = [
                "üéâ **–ü–ï–†–ï–ú–û–ì–ê!**",
                "",
                f"‚≠ê –û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å–≤—ñ–¥—É: {combat_result['experience_gained']}",
                f"üí∞ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–ª–æ—Ç–∞: {combat_result['gold_gained']}"
            ]
            
            if combat_result.get('level_up'):
                lines.extend([
                    "",
                    f"üéä **–ü–Ü–î–í–ò–©–ï–ù–ù–Ø –†–Ü–í–ù–Ø!** –¢–µ–ø–µ—Ä {combat_result['new_level']} —Ä—ñ–≤–µ–Ω—å!",
                    combat_result.get('stat_increases', '')
                ])
            
            if combat_result['items_dropped']:
                lines.extend([
                    "",
                    "üéÅ **–ó–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏:**"
                ])
                for item_id in combat_result['items_dropped']:
                    lines.append(f"‚Ä¢ {item_id}")
        
        elif result_type == CombatResult.DEFEAT:
            lines = [
                "üíÄ **–ü–û–†–ê–ó–ö–ê!**",
                "",
                "–í–∏ –±—É–ª–∏ –ø–µ—Ä–µ–º–æ–∂–µ–Ω—ñ –≤ –±–æ—é...",
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—î —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è!"
            ]
        
        elif result_type == CombatResult.FLEE_SUCCESS:
            lines = [
                "üí® **–í–¢–ï–ß–ê –í–î–ê–õ–ê–°–Ø!**",
                "",
                "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –∑ –±–æ—é."
            ]
        
        else:
            lines = ["–ë—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ."]
        
        lines.extend([
            "",
            f"‚öîÔ∏è –•–æ–¥—ñ–≤ —É –±–æ—é: {combat_result['turn_count']}",
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {combat_result['character_health']}"
        ])
        
        return "\n".join(lines)


# –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ –±–æ—é
def calculate_combat_power(character: Character, character_manager: CharacterManager) -> int:
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –±–æ–π–æ–≤—É —Å–∏–ª—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    total_stats = character_manager.get_total_stats(character)
    
    power = (
        total_stats['max_health'] * 0.4 +
        total_stats['attack'] * 8 +
        total_stats['defense'] * 6 +
        total_stats['magic_power'] * 8 +
        total_stats['speed'] * 2 +
        total_stats['critical_chance'] * 3 +
        total_stats['block_chance'] * 2 +
        character.level * 20
    )
    
    return int(power)


def get_combat_recommendation(character_power: int, enemy_difficulty: int) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –¥–ª—è –±–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–∏–ª–∏"""
    ratio = character_power / max(1, enemy_difficulty)
    
    if ratio >= 1.5:
        return "üü¢ –õ–µ–≥–∫–∞ –ø–µ—Ä–µ–º–æ–≥–∞"
    elif ratio >= 1.2:
        return "üü° –•–æ—Ä–æ—à—ñ —à–∞–Ω—Å–∏"
    elif ratio >= 0.8:
        return "üü† –†—ñ–≤–Ω–∏–π –±—ñ–π"
    elif ratio >= 0.6:
        return "üî¥ –°–∫–ª–∞–¥–Ω–∏–π –±—ñ–π"
    else:
        return "üî¥ –î—É–∂–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ!"
