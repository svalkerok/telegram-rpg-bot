"""
Achievement system for Telegram RPG Bot "–õ–µ–≥–µ–Ω–¥–∏ –í–∞–ª–≥–∞–ª–ª—ñ—ó"
Manages achievements, rewards, and progress tracking
"""

import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
from datetime import datetime

logger = logging.getLogger(__name__)


class AchievementType(Enum):
    """Types of achievements"""
    COMBAT = "combat"
    EXPLORATION = "exploration"
    ECONOMIC = "economic"
    ARENA = "arena"
    SOCIAL = "social"
    SPECIAL = "special"


class RewardType(Enum):
    """Types of rewards"""
    EXPERIENCE = "experience"
    GOLD = "gold"
    ITEM = "item"
    TITLE = "title"


@dataclass
class AchievementReward:
    """Achievement reward data"""
    type: RewardType
    value: int
    item_id: Optional[str] = None
    title: Optional[str] = None


@dataclass
class Achievement:
    """Achievement definition"""
    id: str
    name: str
    description: str
    type: AchievementType
    condition: str  # Description of what needs to be done
    requirement_key: str  # Statistics key to check
    requirement_value: int  # Value needed to unlock
    rewards: List[AchievementReward]
    icon: str
    hidden: bool = False  # Hidden until unlocked
    
    def check_condition(self, stats: dict) -> bool:
        """Check if achievement condition is met"""
        current_value = stats.get(self.requirement_key, 0)
        # Ensure we're comparing numbers
        try:
            current_value = int(current_value) if current_value is not None else 0
        except (ValueError, TypeError):
            current_value = 0
        return current_value >= self.requirement_value


class AchievementManager:
    """Manages achievements and rewards"""
    
    def __init__(self, db_manager):
        self.db = db_manager
        self.achievements = self._initialize_achievements()
    
    def _initialize_achievements(self) -> Dict[str, Achievement]:
        """Initialize all achievements"""
        achievements = {}
        
        # COMBAT ACHIEVEMENTS
        achievements["first_blood"] = Achievement(
            id="first_blood",
            name="–ü–µ—Ä—à–∞ –∫—Ä–æ–≤",
            description="–ü–µ—Ä–µ–º–æ–∂—ñ—Ç—å —Å–≤–æ–≥–æ –ø–µ—Ä—à–æ–≥–æ –≤–æ—Ä–æ–≥–∞",
            type=AchievementType.COMBAT,
            condition="–í–±–∏–π—Ç–µ 1 –≤–æ—Ä–æ–≥–∞",
            requirement_key="enemies_killed",
            requirement_value=1,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 50),
                AchievementReward(RewardType.GOLD, 25)
            ],
            icon="‚öîÔ∏è"
        )
        
        achievements["mass_killer"] = Achievement(
            id="mass_killer",
            name="–ú–∞—Å–æ–≤–∏–π –≤–±–∏–≤—Ü—è",
            description="–ü–µ—Ä–µ–º–æ–∂—ñ—Ç—å 100 –≤–æ—Ä–æ–≥—ñ–≤",
            type=AchievementType.COMBAT,
            condition="–í–±–∏–π—Ç–µ 100 –≤–æ—Ä–æ–≥—ñ–≤",
            requirement_key="enemies_killed",
            requirement_value=100,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 500),
                AchievementReward(RewardType.GOLD, 200),
                AchievementReward(RewardType.TITLE, 0, title="–£–±–∏–≤—Ü—è")
            ],
            icon="üíÄ"
        )
        
        achievements["slaughter_master"] = Achievement(
            id="slaughter_master",
            name="–ú–∞–π—Å—Ç–µ—Ä –±–æ–π–Ω—ñ",
            description="–ü–µ—Ä–µ–º–æ–∂—ñ—Ç—å 500 –≤–æ—Ä–æ–≥—ñ–≤",
            type=AchievementType.COMBAT,
            condition="–í–±–∏–π—Ç–µ 500 –≤–æ—Ä–æ–≥—ñ–≤",
            requirement_key="enemies_killed",
            requirement_value=500,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 1000),
                AchievementReward(RewardType.GOLD, 500),
                AchievementReward(RewardType.ITEM, 0, item_id="legendary_sword")
            ],
            icon="üó°Ô∏è"
        )
        
        achievements["critical_master"] = Achievement(
            id="critical_master",
            name="–ö—Ä–∏—Ç–∏—á–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä",
            description="–ó–∞–≤–¥–∞–π—Ç–µ 50 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —É–¥–∞—Ä—ñ–≤",
            type=AchievementType.COMBAT,
            condition="–ó–∞–≤–¥–∞–π—Ç–µ 50 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —É–¥–∞—Ä—ñ–≤",
            requirement_key="critical_hits",
            requirement_value=50,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 300),
                AchievementReward(RewardType.GOLD, 150)
            ],
            icon="üí•"
        )
        
        # EXPLORATION ACHIEVEMENTS
        achievements["dungeon_conqueror"] = Achievement(
            id="dungeon_conqueror",
            name="–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –º–µ—Ä—Ç–≤–∏—Ö",
            description="–ó–∞–≤–µ—Ä—à—ñ—Ç—å 10 –ø—ñ–¥–∑–µ–º–µ–ª—å",
            type=AchievementType.EXPLORATION,
            condition="–ó–∞–≤–µ—Ä—à—ñ—Ç—å 10 –ø—ñ–¥–∑–µ–º–µ–ª—å",
            requirement_key="dungeons_completed",
            requirement_value=10,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 750),
                AchievementReward(RewardType.GOLD, 300),
                AchievementReward(RewardType.TITLE, 0, title="–î–æ—Å–ª—ñ–¥–Ω–∏–∫ –ø—ñ–¥–∑–µ–º–µ–ª—å")
            ],
            icon="üè∞"
        )
        
        achievements["dragon_slayer"] = Achievement(
            id="dragon_slayer",
            name="–î—Ä–∞–∫–æ–Ω–æ–±–æ—î—Ü—å",
            description="–ü–µ—Ä–µ–º–æ–∂—ñ—Ç—å –¥—Ä–∞–∫–æ–Ω–∞ –≤ –õ–æ–≥–æ–≤—ñ –î—Ä–∞–∫–æ–Ω–∞",
            type=AchievementType.EXPLORATION,
            condition="–ü–µ—Ä–µ–º–æ–∂—ñ—Ç—å —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Å–∞ –õ–æ–≥–æ–≤–∞ –î—Ä–∞–∫–æ–Ω–∞",
            requirement_key="dragon_boss_kills",
            requirement_value=1,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 2000),
                AchievementReward(RewardType.GOLD, 1000),
                AchievementReward(RewardType.ITEM, 0, item_id="dragon_scale_armor"),
                AchievementReward(RewardType.TITLE, 0, title="–î—Ä–∞–∫–æ–Ω–æ–±–æ—î—Ü—å")
            ],
            icon="üêâ"
        )
        
        achievements["forest_wanderer"] = Achievement(
            id="forest_wanderer",
            name="–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫ –ª—ñ—Å—É",
            description="–í–∏–≥—Ä–∞–π—Ç–µ 25 –±–æ—ó–≤ —É –¢–µ–º–Ω–æ–º—É –ª—ñ—Å—ñ",
            type=AchievementType.EXPLORATION,
            condition="–ü–µ—Ä–µ–º–æ–∂—ñ—Ç—å —É 25 –±–æ—è—Ö –≤ –ª—ñ—Å—ñ",
            requirement_key="forest_wins",
            requirement_value=25,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 400),
                AchievementReward(RewardType.GOLD, 200)
            ],
            icon="üå≤"
        )
        
        # ECONOMIC ACHIEVEMENTS
        achievements["rich"] = Achievement(
            id="rich",
            name="–ë–∞–≥–∞—Ç–∏–π",
            description="–ù–∞–∫–æ–ø–∏—á—ñ—Ç—å 1000 –∑–æ–ª–æ—Ç–∞",
            type=AchievementType.ECONOMIC,
            condition="–ú–∞—Ç–∏ 1000 –∑–æ–ª–æ—Ç–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ",
            requirement_key="max_gold_owned",
            requirement_value=1000,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 200),
                AchievementReward(RewardType.GOLD, 100)
            ],
            icon="üí∞"
        )
        
        achievements["millionaire"] = Achievement(
            id="millionaire",
            name="–ú—ñ–ª—å–π–æ–Ω–µ—Ä",
            description="–ù–∞–∫–æ–ø–∏—á—ñ—Ç—å 10000 –∑–æ–ª–æ—Ç–∞",
            type=AchievementType.ECONOMIC,
            condition="–ú–∞—Ç–∏ 10000 –∑–æ–ª–æ—Ç–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ",
            requirement_key="max_gold_owned",
            requirement_value=10000,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 1000),
                AchievementReward(RewardType.GOLD, 500),
                AchievementReward(RewardType.TITLE, 0, title="–ú—ñ–ª—å–π–æ–Ω–µ—Ä")
            ],
            icon="üíé"
        )
        
        achievements["trader"] = Achievement(
            id="trader",
            name="–¢–æ—Ä–≥–æ–≤–µ—Ü—å",
            description="–í–∏—Ç—Ä–∞—Ç—å—Ç–µ 5000 –∑–æ–ª–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ",
            type=AchievementType.ECONOMIC,
            condition="–í–∏—Ç—Ä–∞—Ç–∏—Ç–∏ 5000 –∑–æ–ª–æ—Ç–∞ –Ω–∞ –ø–æ–∫—É–ø–∫–∏",
            requirement_key="gold_spent",
            requirement_value=5000,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 500),
                AchievementReward(RewardType.GOLD, 250),
                AchievementReward(RewardType.TITLE, 0, title="–ú–∞–π—Å—Ç–µ—Ä —Ç–æ—Ä–≥—ñ–≤–ª—ñ")
            ],
            icon="üõí"
        )
        
        # ARENA ACHIEVEMENTS
        achievements["arena_champion"] = Achievement(
            id="arena_champion",
            name="–ß–µ–º–ø—ñ–æ–Ω –∞—Ä–µ–Ω–∏",
            description="–í–∏–≥—Ä–∞–π—Ç–µ 10 –±–æ—ó–≤ –Ω–∞ –∞—Ä–µ–Ω—ñ",
            type=AchievementType.ARENA,
            condition="–ü–µ—Ä–µ–º–æ–∂—ñ—Ç—å —É 10 –±–æ—è—Ö –Ω–∞ –∞—Ä–µ–Ω—ñ",
            requirement_key="arena_wins",
            requirement_value=10,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 600),
                AchievementReward(RewardType.GOLD, 300),
                AchievementReward(RewardType.TITLE, 0, title="–ß–µ–º–ø—ñ–æ–Ω –∞—Ä–µ–Ω–∏")
            ],
            icon="üèÜ"
        )
        
        achievements["undefeated"] = Achievement(
            id="undefeated",
            name="–ù–µ–ø–µ—Ä–µ–º–æ–∂–Ω–∏–π",
            description="–í–∏–≥—Ä–∞–π—Ç–µ 5 –±–æ—ó–≤ –Ω–∞ –∞—Ä–µ–Ω—ñ –ø–æ—Å–ø—ñ–ª—å",
            type=AchievementType.ARENA,
            condition="–°–µ—Ä—ñ—è –∑ 5 –ø–µ—Ä–µ–º–æ–≥ –Ω–∞ –∞—Ä–µ–Ω—ñ",
            requirement_key="arena_win_streak",
            requirement_value=5,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 800),
                AchievementReward(RewardType.GOLD, 400),
                AchievementReward(RewardType.ITEM, 0, item_id="champion_crown")
            ],
            icon="üëë"
        )
        
        # SOCIAL ACHIEVEMENTS
        achievements["potion_master"] = Achievement(
            id="potion_master",
            name="–ú–∞–π—Å—Ç–µ—Ä –∑—ñ–ª–ª—è",
            description="–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ 50 –∑—ñ–ª–ª—å",
            type=AchievementType.SOCIAL,
            condition="–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ 50 –∑—ñ–ª–ª—å",
            requirement_key="potions_used",
            requirement_value=50,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 300),
                AchievementReward(RewardType.GOLD, 150),
                AchievementReward(RewardType.ITEM, 0, item_id="alchemist_kit")
            ],
            icon="üß™"
        )
        
        achievements["survivor"] = Achievement(
            id="survivor",
            name="–í–∏–∂–∏–≤—à–∏–π",
            description="–í—Ç–µ—á—ñ—Ç—å –∑ –±–æ—é 10 —Ä–∞–∑—ñ–≤",
            type=AchievementType.SOCIAL,
            condition="–í—Ç–µ–∫—Ç–∏ –∑ 10 –±–æ—ó–≤",
            requirement_key="battles_fled",
            requirement_value=10,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 100),
                AchievementReward(RewardType.GOLD, 50)
            ],
            icon="üèÉ"
        )
        
        # SPECIAL ACHIEVEMENTS
        achievements["level_master"] = Achievement(
            id="level_master",
            name="–ú–∞–π—Å—Ç–µ—Ä —Ä—ñ–≤–Ω—ñ–≤",
            description="–î–æ—Å—è–≥–Ω—ñ—Ç—å 10-–≥–æ —Ä—ñ–≤–Ω—è",
            type=AchievementType.SPECIAL,
            condition="–î–æ—Å—è–≥—Ç–∏ 10-–≥–æ —Ä—ñ–≤–Ω—è",
            requirement_key="max_level_reached",
            requirement_value=10,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 1500),
                AchievementReward(RewardType.GOLD, 750),
                AchievementReward(RewardType.TITLE, 0, title="–ú–∞–π—Å—Ç–µ—Ä")
            ],
            icon="‚≠ê"
        )
        
        achievements["legendary_hero"] = Achievement(
            id="legendary_hero",
            name="–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –≥–µ—Ä–æ–π",
            description="–î–æ—Å—è–≥–Ω—ñ—Ç—å 20-–≥–æ —Ä—ñ–≤–Ω—è",
            type=AchievementType.SPECIAL,
            condition="–î–æ—Å—è–≥—Ç–∏ 20-–≥–æ —Ä—ñ–≤–Ω—è",
            requirement_key="max_level_reached",
            requirement_value=20,
            rewards=[
                AchievementReward(RewardType.EXPERIENCE, 3000),
                AchievementReward(RewardType.GOLD, 1500),
                AchievementReward(RewardType.ITEM, 0, item_id="legendary_artifact"),
                AchievementReward(RewardType.TITLE, 0, title="–õ–µ–≥–µ–Ω–¥–∞")
            ],
            icon="üåü",
            hidden=True
        )
        
        return achievements
    
    async def check_achievements(self, user_id: int) -> List[Achievement]:
        """Check for new achievements for user"""
        try:
            # Get user statistics
            stats = await self.db.get_statistics(user_id)
            if not stats:
                return []
            
            # Get character for level checking
            character = await self.db.get_character(user_id)
            if not character:
                return []
            
            # Convert stats to dict for easier checking (ensure all values are integers)
            def safe_int(value, default=0):
                try:
                    return int(value) if value is not None else default
                except (ValueError, TypeError):
                    return default
            
            stats_dict = {
                'enemies_killed': safe_int(stats.enemies_killed),
                'critical_hits': safe_int(stats.critical_hits),
                'dungeons_completed': safe_int(stats.dungeons_completed),
                'dragon_boss_kills': safe_int(getattr(stats, 'dragon_boss_kills', 0)),
                'forest_wins': safe_int(getattr(stats, 'forest_wins', 0)),
                'max_gold_owned': safe_int(getattr(stats, 'max_gold_owned', character.gold)),
                'gold_spent': safe_int(getattr(stats, 'gold_spent', 0)),
                'arena_wins': safe_int(stats.arena_wins),
                'arena_win_streak': safe_int(getattr(stats, 'arena_win_streak', 0)),
                'potions_used': safe_int(getattr(stats, 'potions_used', 0)),
                'battles_fled': safe_int(getattr(stats, 'battles_fled', 0)),
                'max_level_reached': safe_int(character.level)
            }
            
            # Get already earned achievements
            earned_achievements = await self.db.get_user_achievements(user_id)
            earned_ids = [ach['achievement_id'] for ach in earned_achievements] if earned_achievements else []
            
            # Check for new achievements
            new_achievements = []
            for achievement in self.achievements.values():
                if achievement.id not in earned_ids and achievement.check_condition(stats_dict):
                    new_achievements.append(achievement)
            
            return new_achievements
            
        except Exception as e:
            logger.error(f"Error checking achievements for user {user_id}: {e}")
            return []
    
    async def give_achievement_reward(self, user_id: int, achievement: Achievement) -> str:
        """Give rewards for achievement and return description"""
        try:
            reward_text = ""
            
            for reward in achievement.rewards:
                if reward.type == RewardType.EXPERIENCE:
                    # Add experience to character
                    character = await self.db.get_character(user_id)
                    if character:
                        from game_logic.character import CharacterManager
                        char_manager = CharacterManager(self.db)
                        exp_result = char_manager.add_experience(character, reward.value)
                        await self.db.update_character(character)
                        
                        reward_text += f"‚ö° +{reward.value} –¥–æ—Å–≤—ñ–¥—É\n"
                        if exp_result and exp_result.get('level_up'):
                            reward_text += f"üéâ –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {exp_result['new_level']}!\n"
                
                elif reward.type == RewardType.GOLD:
                    # Add gold to character
                    character = await self.db.get_character(user_id)
                    if character:
                        character.gold += reward.value
                        await self.db.update_character(character)
                    reward_text += f"üí∞ +{reward.value} –∑–æ–ª–æ—Ç–∞\n"
                
                elif reward.type == RewardType.TITLE:
                    # Add title to character (could be stored in a titles table)
                    reward_text += f"üèÖ –ù–æ–≤–∏–π —Ç–∏—Ç—É–ª: **{reward.title}**\n"
                
                elif reward.type == RewardType.ITEM:
                    # Add item to inventory
                    from database.database_models import InventoryItem
                    item_name = self._get_item_name(reward.item_id)
                    
                    inventory_item = InventoryItem(
                        item_id=reward.item_id,
                        user_id=user_id,
                        item_type='special',
                        name=item_name,
                        description=f"–ù–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {achievement.name}",
                        quantity=1,
                        properties={'achievement_reward': True, 'achievement_id': achievement.id}
                    )
                    
                    await self.db.add_item_to_inventory(user_id, inventory_item)
                    reward_text += f"üéÅ –û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç: **{item_name}**\n"
            
            # Record achievement
            await self.db.add_user_achievement(user_id, achievement.id)
            
            return reward_text.strip()
            
        except Exception as e:
            logger.error(f"Error giving achievement reward: {e}")
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞—á—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏"
    
    def _get_item_name(self, item_id: str) -> str:
        """Get item name by ID"""
        item_names = {
            'legendary_sword': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –º–µ—á',
            'dragon_scale_armor': '–û–±–ª–∞–¥—É–Ω–∫–∏ –∑ –¥—Ä–∞–∫–æ–Ω—è—á–æ—ó –ª—É—Å–∫–∏',
            'champion_crown': '–ö–æ—Ä–æ–Ω–∞ —á–µ–º–ø—ñ–æ–Ω–∞',
            'alchemist_kit': '–ù–∞–±—ñ—Ä –∞–ª—Ö—ñ–º—ñ–∫–∞',
            'legendary_artifact': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç'
        }
        return item_names.get(item_id, item_id.replace('_', ' ').title())
    
    def get_achievement_by_id(self, achievement_id: str) -> Optional[Achievement]:
        """Get achievement by ID"""
        return self.achievements.get(achievement_id)
    
    def get_achievements_by_type(self, achievement_type: AchievementType) -> List[Achievement]:
        """Get all achievements of specific type"""
        return [ach for ach in self.achievements.values() if ach.type == achievement_type]
    
    def get_all_achievements(self) -> List[Achievement]:
        """Get all achievements"""
        return list(self.achievements.values())
