"""
Start command handler and character creation for Telegram RPG Bot "–õ–µ–≥–µ–Ω–¥–∏ –í–∞–ª–≥–∞–ª–ª—ñ—ó"
–°–∏—Å—Ç–µ–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
import re

from database.db_manager import DatabaseManager
import config

logger = logging.getLogger(__name__)
db = DatabaseManager(config.DATABASE_URL)


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
    –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character = await db.get_character(user_id)
        
        if character:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –ø–æ–∫–∞–∑—É—î–º–æ —Ç–∞–≤–µ—Ä–Ω—É
            logger.info(f"Existing user {user_id} ({username}) returned to game")
            await show_tavern_menu(update, context, character)
        else:
            # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            logger.info(f"New user started bot: {user_id} ({username})")
            await show_welcome_message(update, context)
            
    except Exception as e:
        logger.error(f"Error in start_handler: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode='Markdown'
        )


async def show_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    welcome_text = """
üéÆ **–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ "–õ–µ–≥–µ–Ω–¥–∏ –í–∞–ª–≥–∞–ª–ª—ñ—ó"!**

üè∞ –í–∏ –ø—Ä–∏–±—É–ª–∏ –¥–æ –º—ñ—Å—Ç–µ—á–∫–∞ –ö–∞–º—ñ–Ω–Ω–∏–π –ü—Ä–∏—Ç—É–ª–æ–∫ –ø—ñ—Å–ª—è –¥–æ–≤–≥–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ.
–ü–æ–ø–µ—Ä–µ–¥—É –≤–∞—Å —á–µ–∫–∞—é—Ç—å –±–µ–∑–ª—ñ—á –ø—Ä–∏–≥–æ–¥, –±–∞–≥–∞—Ç—Å—Ç–≤–∞ —Ç–∞ —Å–ª–∞–≤–∞!

‚öîÔ∏è –£ —Ü—å–æ–º—É —Å–≤—ñ—Ç—ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ:
‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∑ –æ–¥–Ω–æ–≥–æ –∑ —Ç—Ä—å–æ—Ö –∫–ª–∞—Å—ñ–≤
‚Ä¢ –î–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è –∑ –±–æ—Å–∞–º–∏
‚Ä¢ –ë–∏—Ç–∏—Å—è –Ω–∞ –∞—Ä–µ–Ω—ñ –∑ —ñ–Ω—à–∏–º–∏ –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∞–º–∏
‚Ä¢ –ü–æ–ª—é–≤–∞—Ç–∏ –Ω–∞ –º–æ–Ω—Å—Ç—Ä—ñ–≤ —É –¢–µ–º–Ω–æ–º—É –ª—ñ—Å—ñ
‚Ä¢ –¢–æ—Ä–≥—É–≤–∞—Ç–∏ –∑ –º—ñ—Å—Ü–µ–≤–∏–º–∏ —Ç–æ—Ä–≥–æ–≤—Ü—è–º–∏
‚Ä¢ –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥–∏

üìú –©–æ–± –ø–æ—á–∞—Ç–∏ —Å–≤–æ—é –ø—Ä–∏–≥–æ–¥—É, —Å—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!
"""
    
    keyboard = [[InlineKeyboardButton("‚öîÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="create_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def character_creation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    –ö–µ—Ä—É—î —É—Å—ñ–º –ø—Ä–æ—Ü–µ—Å–æ–º –≤—ñ–¥ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    """
    query = update.callback_query
    if query:
        await query.answer()
        
        data = query.data
        
        if data == "create_start":
            # –ü–æ—á–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –∫–ª–∞—Å—É
            await show_class_selection(update, context)
            
        elif data.startswith("create_class_"):
            # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π –∫–ª–∞—Å —Ç–∞ –∑–∞–ø–∏—Ç–∞—Ç–∏ —ñ–º'—è
            char_class = data.replace("create_class_", "")
            context.user_data['selected_class'] = char_class
            logger.info(f"User {update.effective_user.id} selected class: {char_class}")
            await ask_character_name(update, context)


async def show_class_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –∫–ª–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏
    –î–µ—Ç–∞–ª—å–Ω—ñ –æ–ø–∏—Å–∏ –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É
    """
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∫–ª–∞—Å—ñ–≤
    warrior_config = config.CHARACTER_CLASSES['warrior']
    mage_config = config.CHARACTER_CLASSES['mage']
    ranger_config = config.CHARACTER_CLASSES['ranger']
    
    class_text = f"""
üë§ **–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –≤–∞—à–æ–≥–æ –≥–µ—Ä–æ—è:**

{warrior_config['emoji']} **{warrior_config['name']}** - –ú–∞–π—Å—Ç–µ—Ä –±–ª–∏–∂–Ω—å–æ–≥–æ –±–æ—é
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíö –ó–¥–æ—Ä–æ–≤'—è: {warrior_config['base_stats']['max_health']}
‚öîÔ∏è –ê—Ç–∞–∫–∞: {warrior_config['base_stats']['attack']}
üõ° –ó–∞—Ö–∏—Å—Ç: {warrior_config['base_stats']['defense']}
‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å: {warrior_config['base_stats']['speed']}
üõ° –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è: {warrior_config['base_stats']['block_chance']}%
**–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:** –í–∏—Å–æ–∫–µ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ –∑–∞—Ö–∏—Å—Ç, —Å–∏–ª—å–Ω—ñ —Ñ—ñ–∑–∏—á–Ω—ñ –∞—Ç–∞–∫–∏

{mage_config['emoji']} **{mage_config['name']}** - –í–æ–ª–æ–¥–∞—Ä –º–∞–≥—ñ—á–Ω–∏—Ö —Å–∏–ª
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíö –ó–¥–æ—Ä–æ–≤'—è: {mage_config['base_stats']['max_health']}
üíô –ú–∞–Ω–∞: {mage_config['base_stats']['max_mana']}
üîÆ –ú–∞–≥—ñ—á–Ω–∞ —Å–∏–ª–∞: {mage_config['base_stats']['magic_power']}
‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å: {mage_config['base_stats']['speed']}
**–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:** –ü–æ—Ç—É–∂–Ω–∞ –º–∞–≥—ñ—è —Ç–∞ –ª—ñ–∫—É–≤–∞–Ω–Ω—è, –≤–∏—Å–æ–∫–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –º–∞–≥—ñ—ó

{ranger_config['emoji']} **{ranger_config['name']}** - –®–≤–∏–¥–∫–∏–π —Ç–∞ —Å–ø—Ä–∏—Ç–Ω–∏–π
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíö –ó–¥–æ—Ä–æ–≤'—è: {ranger_config['base_stats']['max_health']}
‚öîÔ∏è –ê—Ç–∞–∫–∞: {ranger_config['base_stats']['attack']}
‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å: {ranger_config['base_stats']['speed']}
üí• –ö—Ä–∏—Ç–∏—á–Ω–∏–π —É–¥–∞—Ä: {ranger_config['base_stats']['critical_chance']}%
**–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:** –í–∏—Å–æ–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ç–∞ —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —É–¥–∞—Ä—É

–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å, —è–∫–∏–π –Ω–∞–π–∫—Ä–∞—â–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∞—à–æ–º—É —Å—Ç–∏–ª—é –≥—Ä–∏:
"""
    
    keyboard = [
        [InlineKeyboardButton(f"{warrior_config['emoji']} {warrior_config['name']}", callback_data="create_class_warrior")],
        [InlineKeyboardButton(f"{mage_config['emoji']} {mage_config['name']}", callback_data="create_class_mage")],
        [InlineKeyboardButton(f"{ranger_config['emoji']} {ranger_config['name']}", callback_data="create_class_ranger")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            class_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            class_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def ask_character_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–ø–∏—Ç —ñ–º–µ–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
    –ü–æ–∫–∞–∑—É—î –≤–∏–º–æ–≥–∏ –¥–æ —ñ–º–µ–Ω—ñ —Ç–∞ –æ–±—Ä–∞–Ω–∏–π –∫–ª–∞—Å
    """
    char_class = context.user_data.get('selected_class', 'warrior')
    class_config = config.CHARACTER_CLASSES.get(char_class, config.CHARACTER_CLASSES['warrior'])
    
    name_request_text = f"""
‚úÖ **–ö–ª–∞—Å –æ–±—Ä–∞–Ω–æ:** {class_config['emoji']} {class_config['name']}

üìù **–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∞—à–æ–≥–æ –≥–µ—Ä–æ—è:**

**–í–∏–º–æ–≥–∏ –¥–æ —ñ–º–µ–Ω—ñ:**
‚Ä¢ –í—ñ–¥ {config.MIN_CHARACTER_NAME_LENGTH} –¥–æ {config.MAX_CHARACTER_NAME_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤
‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏
‚Ä¢ –¶–∏—Ñ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ
‚Ä¢ –ë–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤

**–ü—Ä–∏–∫–ª–∞–¥–∏ –≥–∞—Ä–Ω–∏—Ö —ñ–º–µ–Ω:**
‚Ä¢ –¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ
‚Ä¢ –ê—Ä—Ç—É—Ä –ö–æ—Ä–æ–ª—å  
‚Ä¢ –ú–µ—Ä–ª—ñ–Ω –ß–∞—Ä—ñ–≤–Ω–∏–∫
‚Ä¢ –ï–ª—å—Ñ—ñ–π–∫–∞ –ê—Ä—ñ–µ–ª—å

üí¨ –ù–∞–ø–∏—à—ñ—Ç—å —ñ–º'—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ:
"""
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–ª–∞–≥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
    context.user_data['waiting_for_name'] = True
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –≤ –ë–î —è–∫ backup (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä–æ–±–ª–µ–º –∑ persistence)
    try:
        import json
        user_id = update.effective_user.id
        state_data = json.dumps({
            'waiting_for_name': True,
            'selected_class': char_class
        })
        await db.set_user_data(user_id, 'character_creation_state', state_data)
        logger.info(f"Saved character creation state to DB for user {user_id}")
    except Exception as e:
        logger.warning(f"Could not save creation state to DB: {e}")
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            name_request_text, 
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            name_request_text, 
            parse_mode='Markdown'
        )


async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–∞ —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    """
    
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    logger.info(f"Text input from user {user_id}: '{message_text}'")
    logger.info(f"User data: {context.user_data}")
    
    # Skip admin users ONLY if they're not creating a character
    if user_id == config.ADMIN_USER_ID:
        # Check if admin is in character creation process
        waiting_for_name = context.user_data.get('waiting_for_name', False)
        
        # Also check DB backup state
        if not waiting_for_name:
            try:
                import json
                db_state_raw = await db.get_user_data(user_id, 'character_creation_state')
                if db_state_raw:
                    db_state = json.loads(db_state_raw)
                    waiting_for_name = db_state and db_state.get('waiting_for_name', False)
            except Exception as e:
                logger.warning(f"Could not check admin creation state: {e}")
        
        # If admin is not creating character, skip to admin handler
        if not waiting_for_name:
            logger.info(f"Skipping admin user {user_id} (not creating character)")
            return
        else:
            logger.info(f"Admin user {user_id} is creating character, processing...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–≤ context.user_data –∞–±–æ –≤ –ë–î)
    waiting_for_name = context.user_data.get('waiting_for_name', False)
    selected_class = context.user_data.get('selected_class')
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ context.user_data, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ë–î
    if not waiting_for_name:
        try:
            import json
            db_state_raw = await db.get_user_data(user_id, 'character_creation_state')
            if db_state_raw:
                db_state = json.loads(db_state_raw)
                if db_state and db_state.get('waiting_for_name'):
                    waiting_for_name = True
                    selected_class = db_state.get('selected_class', 'warrior')
                    logger.info(f"Restored creation state from DB for user {user_id}: {db_state}")
                    
                    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ context.user_data
                    context.user_data['waiting_for_name'] = True
                    context.user_data['selected_class'] = selected_class
        except Exception as e:
            logger.warning(f"Could not check DB state: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ —ñ–º'—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if waiting_for_name:
        logger.info(f"Processing character name: '{message_text}' for user {user_id}")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
        validation_result = await validate_character_name(message_text)
        
        if validation_result['valid']:
            # –Ü–º'—è –≤–∞–ª—ñ–¥–Ω–µ - —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            logger.info(f"Valid name, creating character for user {user_id}")
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            context.user_data['waiting_for_name'] = False
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –≤ –ë–î
            try:
                await db.set_user_data(user_id, 'character_creation_state', None)
                logger.info(f"Cleared creation state from DB for user {user_id}")
            except Exception as e:
                logger.warning(f"Could not clear creation state: {e}")
            
            await create_character_with_name(update, context, message_text)
        else:
            # –Ü–º'—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
            logger.warning(f"Invalid name '{message_text}' for user {user_id}: {validation_result['error']}")
            await update.message.reply_text(
                f"‚ùå {validation_result['error']}\n\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                parse_mode='Markdown'
            )
            return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—à—ñ —Ç–∏–ø–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –∞–¥–º—ñ–Ω–∞)
    elif context.user_data.get('waiting_for_broadcast'):
        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (–∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—è)
        from handlers.admin_handler import process_broadcast
        await process_broadcast(update, context)
    
    else:
        # –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        logger.info(f"Unexpected text input from user {user_id}, showing help")
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –ø–µ—Ä—Å–æ–Ω–∞–∂
        character = await db.get_character(user_id)
        if character:
            # –Ñ –ø–µ—Ä—Å–æ–Ω–∞–∂ - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –º–µ–Ω—é —Ç–∞–≤–µ—Ä–Ω–∏
            await update.message.reply_text(
                "üèõ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start —â–æ–± –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –¥–æ —Ç–∞–≤–µ—Ä–Ω–∏ –∞–±–æ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.",
                parse_mode='Markdown'
            )
        else:
            # –ù–µ–º–∞—î –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏
            await update.message.reply_text(
                "üë§ –°—Ö–æ–∂–µ, —É –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥–µ—Ä–æ—è.",
                parse_mode='Markdown'
            )


async def validate_character_name(name: str) -> dict:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    """
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
    if len(name) < config.MIN_CHARACTER_NAME_LENGTH:
        return {
            'valid': False,
            'error': f"–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ! –ú—ñ–Ω—ñ–º—É–º {config.MIN_CHARACTER_NAME_LENGTH} —Å–∏–º–≤–æ–ª–∏."
        }
    
    if len(name) > config.MAX_CHARACTER_NAME_LENGTH:
        return {
            'valid': False,
            'error': f"–Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ! –ú–∞–∫—Å–∏–º—É–º {config.MAX_CHARACTER_NAME_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
        }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –ø—ñ—Å–ª—è –æ–±—Ä—ñ–∑–∞–Ω–Ω—è –ø—Ä–æ–±—ñ–ª—ñ–≤
    if not name.strip():
        return {
            'valid': False,
            'error': "–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!"
        }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ (—É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ, –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, –ø—Ä–æ–±—ñ–ª–∏)
    allowed_pattern = re.compile(r'^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê0-9\s]+$')
    if not allowed_pattern.match(name):
        return {
            'valid': False,
            'error': "–Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏!"
        }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞–¥–º—ñ—Ä–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±—ñ–ª—ñ–≤ –ø—ñ–¥—Ä—è–¥
    if '  ' in name:
        return {
            'valid': False,
            'error': "–í —ñ–º–µ–Ω—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤ –ø—ñ–¥—Ä—è–¥!"
        }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± —ñ–º'—è –Ω–µ –ø–æ—á–∏–Ω–∞–ª–æ—Å—å –∞–±–æ –Ω–µ –∑–∞–∫—ñ–Ω—á—É–≤–∞–ª–æ—Å—å –ø—Ä–æ–±—ñ–ª–æ–º
    if name != name.strip():
        return {
            'valid': False,
            'error': "–Ü–º'—è –Ω–µ –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—å –ø—Ä–æ–±—ñ–ª–æ–º!"
        }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —ñ–º–µ–Ω—ñ
    if name[0].isdigit():
        return {
            'valid': False,
            'error': "–Ü–º'—è –Ω–µ –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ —Ü–∏—Ñ—Ä–∏!"
        }
    
    return {'valid': True, 'error': None}


async def create_character_with_name(update: Update, context: ContextTypes.DEFAULT_TYPE, name: str) -> None:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑ –∑–∞–¥–∞–Ω–∏–º —ñ–º'—è–º
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∂–µ–Ω–Ω—è –¥–æ —Ç–∞–≤–µ—Ä–Ω–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    """
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    char_class = context.user_data.get('selected_class', 'warrior')
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –Ω–µ –º–∞—î –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
        existing_character = await db.get_character(user_id)
        if existing_character:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î –ø–µ—Ä—Å–æ–Ω–∞–∂! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start —â–æ–± –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –¥–æ —Ç–∞–≤–µ—Ä–Ω–∏.",
                parse_mode='Markdown'
            )
            context.user_data.clear()
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∫–ª–∞—Å—É
        class_config = config.CHARACTER_CLASSES.get(char_class, config.CHARACTER_CLASSES['warrior'])
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_data = {
            'user_id': user_id,
            'username': username,
            'name': name,
            'class': char_class,
            **class_config['base_stats'],
            'weapon': class_config['start_equipment']['weapon'],
            'armor': class_config['start_equipment']['armor']
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        success = await db.create_character(character_data)
        
        if success:
            # –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ - –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ç–∞–≤–µ—Ä–Ω–∏
            success_text = f"""
‚úÖ **–ü–µ—Ä—Å–æ–Ω–∞–∂–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!**

üé≠ **{name}** - {class_config['emoji']} {class_config['name']}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–ü–æ—á–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
üíö –ó–¥–æ—Ä–æ–≤'—è: {character_data['health']}/{character_data['max_health']}
üí∞ –ó–æ–ª–æ—Ç–æ: {character_data.get('gold', 50)}
‚öîÔ∏è –ê—Ç–∞–∫–∞: {character_data['attack']}
üõ° –ó–∞—Ö–∏—Å—Ç: {character_data['defense']}
‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å: {character_data['speed']}
"""
            
            if character_data.get('mana', 0) > 0:
                success_text += f"üíô –ú–∞–Ω–∞: {character_data['mana']}/{character_data['max_mana']}\n"
                success_text += f"üîÆ –ú–∞–≥—ñ—á–Ω–∞ —Å–∏–ª–∞: {character_data['magic_power']}\n"
            
            success_text += f"""
üí• –®–∞–Ω—Å –∫—Ä–∏—Ç—É: {character_data['critical_chance']}%
üõ° –®–∞–Ω—Å –±–ª–æ–∫—É: {character_data['block_chance']}%

**–ü–æ—á–∞—Ç–∫–æ–≤–µ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è:**
‚öîÔ∏è –ó–±—Ä–æ—è: {character_data['weapon']}
üõ° –ë—Ä–æ–Ω—è: {character_data['armor']}

üèõ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Ç–∞–≤–µ—Ä–Ω–∏ "–ö–∞–º—ñ–Ω–Ω–∏–π –ü—Ä–∏—Ç—É–ª–æ–∫"!
–í–∞—à–∞ –ø—Ä–∏–≥–æ–¥–∞ —Ä–æ–∑–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑–∞—Ä–∞–∑!
"""
            
            await update.message.reply_text(success_text, parse_mode='Markdown')
            
            # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
            context.user_data.clear()
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞–≤–µ—Ä–Ω–∏
            character = await db.get_character(user_id)
            if character:
                await show_tavern_menu_from_message(update, context, character)
            
            logger.info(f"Character created successfully: {name} ({char_class}) for user {user_id}")
            
        else:
            # –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ú–æ–∂–ª–∏–≤–æ, —Ç–∞–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode='Markdown'
            )
            logger.error(f"Failed to create character for user {user_id}")
            
    except Exception as e:
        logger.error(f"Error creating character: {e}")
        await update.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode='Markdown'
        )


async def show_tavern_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, character) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞–≤–µ—Ä–Ω–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    """
    from handlers.tavern_handler import show_tavern_menu as tavern_menu
    await tavern_menu(update, context, character)


async def show_tavern_menu_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE, character) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é —Ç–∞–≤–µ—Ä–Ω–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ callback)
    """
    from handlers.tavern_handler import show_tavern_menu_from_message as tavern_menu_from_msg
    await tavern_menu_from_msg(update, context, character)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help - –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ –≥—Ä—ñ"""
    
    help_text = """
üìñ **–î–æ–≤—ñ–¥–∫–∞ –ø–æ –≥—Ä—ñ "–õ–µ–≥–µ–Ω–¥–∏ –í–∞–ª–≥–∞–ª–ª—ñ—ó"**

**üéÆ –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
/start - –ü–æ—á–∞—Ç–∏ –≥—Ä—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Ç–∞–≤–µ—Ä–Ω–∏
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/inventory - –ü–µ—Ä–µ–≥–ª—è–¥ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
/quests - –©–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è

**‚öîÔ∏è –ö–ª–∞—Å–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤:**

üó° **–í–æ—ó–Ω** - –ú–∞–π—Å—Ç–µ—Ä –±–ª–∏–∂–Ω—å–æ–≥–æ –±–æ—é
‚Ä¢ –í–∏—Å–æ–∫–µ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ –∑–∞—Ö–∏—Å—Ç
‚Ä¢ –°–∏–ª—å–Ω—ñ —Ñ—ñ–∑–∏—á–Ω—ñ –∞—Ç–∞–∫–∏
‚Ä¢ –ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –±–ª–æ–∫—É–≤–∞—Ç–∏ –∞—Ç–∞–∫–∏ –≤–æ—Ä–æ–≥—ñ–≤

üßô‚Äç‚ôÇÔ∏è **–ú–∞–≥** - –í–æ–ª–æ–¥–∞—Ä –º–∞–≥—ñ—á–Ω–∏—Ö —Å–∏–ª
‚Ä¢ –ü–æ—Ç—É–∂–Ω—ñ –º–∞–≥—ñ—á–Ω—ñ –∞—Ç–∞–∫–∏
‚Ä¢ –ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –¥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞–Ω—É –¥–ª—è –∑–∞–∫–ª—è—Ç—å

üèπ **–†–æ–∑–≤—ñ–¥–Ω–∏–∫** - –®–≤–∏–¥–∫–∏–π —Ç–∞ —Å–ø—Ä–∏—Ç–Ω–∏–π
‚Ä¢ –í–∏—Å–æ–∫–∏–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —É–¥–∞—Ä—É
‚Ä¢ –í–µ–ª–∏–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ç–∞ —É—Ö–∏–ª—è–Ω–Ω—è
‚Ä¢ –ë–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

**üåç –õ–æ–∫–∞—Ü—ñ—ó –¥–ª—è –ø—Ä–∏–≥–æ–¥:**

üó° **–ü—ñ–¥–∑–µ–º–µ–ª–ª—è** - –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω–∂—ñ –∑ –±–æ—Å–∞–º–∏
‚Ä¢ –°–∫–ª–µ–ø –ù–æ–≤–∞—á–∫–∞ (—Ä—ñ–≤–µ–Ω—å 1+)
‚Ä¢ –ü–µ—á–µ—Ä–∞ –û—Ä–∫—ñ–≤ (—Ä—ñ–≤–µ–Ω—å 3+)  
‚Ä¢ –í–µ–∂–∞ –ú–∞–≥—ñ–≤ (—Ä—ñ–≤–µ–Ω—å 6+)
‚Ä¢ –õ—ñ–≥–≤–æ –î—Ä–∞–∫–æ–Ω–∞ (—Ä—ñ–≤–µ–Ω—å 9+)

‚öîÔ∏è **–ê—Ä–µ–Ω–∞** - PvP –±–∏—Ç–≤–∏ –∑ —ñ–Ω—à–∏–º–∏ –≥—Ä–∞–≤—Ü—è–º–∏
‚Ä¢ –û—Ç—Ä–∏–º—É–π—Ç–µ –∑–æ–ª–æ—Ç–æ —Ç–∞ –¥–æ—Å–≤—ñ–¥ –∑–∞ –ø–µ—Ä–µ–º–æ–≥–∏
‚Ä¢ –†–∏–∑–∏–∫—É–π—Ç–µ, –∞–ª–µ –æ—Ç—Ä–∏–º—É–π—Ç–µ –≤–µ–ª–∏–∫—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏

üå≤ **–¢–µ–º–Ω–∏–π –ª—ñ—Å** - –í—ñ–ª—å–Ω–µ –ø–æ–ª—é–≤–∞–Ω–Ω—è –Ω–∞ –º–æ–Ω—Å—Ç—Ä—ñ–≤
‚Ä¢ –†—ñ–∑–Ω—ñ –∑–æ–Ω–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è
‚Ä¢ –í–∏–ø–∞–¥–∫–æ–≤—ñ –ø–æ–¥—ñ—ó —Ç–∞ –∑–Ω–∞—Ö—ñ–¥–∫–∏

üõí **–¢–æ—Ä–≥–æ–≤–µ—Ü—å** - –ö—É–ø—ñ–≤–ª—è —Ç–∞ –ø—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
‚Ä¢ –ó–±—Ä–æ—è, –±—Ä–æ–Ω—è, –∑—ñ–ª–ª—è
‚Ä¢ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–Ω–∏–∂–∫–∏ –ø–æ —Å–µ—Ä–µ–¥–∞—Ö

**üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤:**
‚Ä¢ –ó–∞–≤–∂–¥–∏ —Å—Ç–µ–∂—Ç–µ –∑–∞ —Ä—ñ–≤–Ω–µ–º –∑–¥–æ—Ä–æ–≤'—è
‚Ä¢ –í–∏–∫–æ–Ω—É–π—Ç–µ —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –¥–æ—Å–≤—ñ–¥—É
‚Ä¢ –ü–æ–∫—Ä–∞—â—É–π—Ç–µ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
‚Ä¢ –ù–µ –π–¥—ñ—Ç—å —É —Å–∫–ª–∞–¥–Ω—ñ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è –±–µ–∑ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–æ–ª–æ—Ç–æ –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–∫—É–ø–æ–∫

**üèÜ –ü—Ä–æ–≥—Ä–µ—Å—ñ—è:**
‚Ä¢ –û—Ç—Ä–∏–º—É–π—Ç–µ –¥–æ—Å–≤—ñ–¥ –∑–∞ –ø–µ—Ä–µ–º–æ–≥–∏ –Ω–∞–¥ –≤–æ—Ä–æ–≥–∞–º–∏
‚Ä¢ –ü—ñ–¥–≤–∏—â—É–π—Ç–µ —Ä—ñ–≤–µ–Ω—å –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
‚Ä¢ –†–æ–∑–±–ª–æ–∫–æ–≤—É–π—Ç–µ –Ω–æ–≤—ñ –ª–æ–∫–∞—Ü—ñ—ó —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
‚Ä¢ –ó–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –æ—Å–æ–±–ª–∏–≤—ñ –≤—á–∏–Ω–∫–∏

‚ùì **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞?**
–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥—Ä–∏!

–£–¥–∞—á—ñ —É –≤–∞—à–∏—Ö –ø—Ä–∏–≥–æ–¥–∞—Ö! ‚öîÔ∏èüõ°‚ú®
"""
    
    keyboard = [
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_character")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫

async def handle_creation_error(update: Update, context: ContextTypes.DEFAULT_TYPE, error_message: str) -> None:
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    error_text = f"""
‚ùå **–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:** {error_message}

üîÑ **–©–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏:**
‚Ä¢ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
‚Ä¢ –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —è–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑.
"""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="create_start")],
        [InlineKeyboardButton("üìû –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞", url="tg://user?id=" + str(config.ADMIN_USER_ID))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        error_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def clear_user_creation_data(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    keys_to_remove = ['selected_class', 'waiting_for_name', 'creation_step']
    
    for key in keys_to_remove:
        context.user_data.pop(key, None)


async def start_new_character_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle start new character callback after character deletion"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    try:
        # Clear any existing user creation data
        await clear_user_creation_data(context)
        
        # Check if user already has a character (shouldn't happen after deletion)
        character = await db.get_character(user_id)
        
        if character:
            # User already has a character - show tavern
            logger.info(f"User {user_id} ({username}) already has character, showing tavern")
            from handlers.tavern_handler import show_tavern_menu
            await show_tavern_menu(update, context, character)
        else:
            # New character creation - show welcome message
            logger.info(f"Starting character creation for user: {user_id} ({username})")
            
            welcome_text = f"""
üè∞ **–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–≤—ñ—Ç—É –í–∞–ª–≥–∞–ª–ª—ñ—ó!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üëã –ü—Ä–∏–≤—ñ—Ç, {update.effective_user.first_name}!

–í–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤ –µ–ø—ñ—á–Ω–∏–π —Å–≤—ñ—Ç RPG –ø—Ä–∏–≥–æ–¥, –¥–µ –≤–∞—Å —á–µ–∫–∞—é—Ç—å:

‚öîÔ∏è **–ë–æ—ó –∑ –º–æ–Ω—Å—Ç—Ä–∞–º–∏** –≤ —Ç–µ–º–Ω–∏—Ö –ø—ñ–¥–∑–µ–º–µ–ª–ª—è—Ö
üå≤ **–ü–æ–ª—é–≤–∞–Ω–Ω—è** –≤ —Ç–∞—î–º–Ω–∏—á–∏—Ö –ª—ñ—Å–∞—Ö  
üèü **PvP –±–∏—Ç–≤–∏** –Ω–∞ –∞—Ä–µ–Ω—ñ
üõí **–¢–æ—Ä–≥—ñ–≤–ª—è** –∑ –º–∞–≥—ñ—á–Ω–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
üèÜ **–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è** —Ç–∞ —â–æ–¥–µ–Ω–Ω—ñ –∫–≤–µ—Å—Ç–∏

–ì–æ—Ç–æ–≤—ñ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Å–≤–æ—é –ª–µ–≥–µ–Ω–¥—É?
"""
            
            keyboard = [
                [InlineKeyboardButton("üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="create_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error in start_new_character_callback: {e}")
        await update.callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
