"""
Admin handler - manages admin commands
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
from datetime import datetime

from database.db_manager import DatabaseManager
from utils.utils_monitoring import game_metrics
import config

logger = logging.getLogger(__name__)
db = DatabaseManager(config.DATABASE_URL)


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show admin panel"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if user_id != config.ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ!")
        return
    
    # Update metrics
    await game_metrics.update_metrics(db)
    
    admin_text = f"""
üîß **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{game_metrics.get_metrics_text()}

**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –û–Ω–æ–≤–∏—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏", callback_data="admin_update_metrics")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_users_list")],
        [InlineKeyboardButton("üí∞ –î–æ–¥–∞—Ç–∏ –∑–æ–ª–æ—Ç–æ", callback_data="admin_add_gold")],
        [InlineKeyboardButton("üíæ –°—Ç–≤–æ—Ä–∏—Ç–∏ backup", callback_data="admin_backup")],
        [InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏", callback_data="admin_game_settings")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", callback_data="admin_restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        admin_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle admin callbacks"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # Check if user is admin
    if user_id != config.ADMIN_USER_ID:
        return
    
    action = query.data.replace("admin_", "")
    
    if action == "update_metrics":
        await update_metrics(update, context)
    
    elif action == "users_list":
        await show_users_list(update, context)
    
    elif action == "add_gold":
        await show_add_gold_menu(update, context)
    
    elif action == "backup":
        await create_backup(update, context)
    
    elif action == "broadcast":
        await show_broadcast_menu(update, context)
    
    elif action == "game_settings":
        await show_game_settings(update, context)
    
    elif action == "restart":
        await restart_bot(update, context)
    
    elif action.startswith("add_gold_user_"):
        # Parse: admin_add_gold_user_USER_ID
        user_id = int(action.replace("add_gold_user_", ""))
        await show_user_gold_options(update, context, user_id)
    
    elif action.startswith("give_gold_"):
        # Parse: admin_give_gold_USER_ID_AMOUNT
        parts = action.replace("give_gold_", "").split("_")
        if len(parts) == 2:
            target_user_id = int(parts[0])
            amount = int(parts[1])
            await give_gold_to_user(update, context, target_user_id, amount)
    
    elif action.startswith("custom_gold_"):
        target_user_id = int(action.replace("custom_gold_", ""))
        # Store target user ID for custom amount input
        context.user_data['custom_gold_user_id'] = target_user_id
        await show_custom_gold_input(update, context, target_user_id)
    
    elif action == "panel":
        await show_admin_panel(update, context)


async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show admin panel via callback"""
    # Update metrics
    await game_metrics.update_metrics(db)
    
    admin_text = f"""
üîß **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{game_metrics.get_metrics_text()}

**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –û–Ω–æ–≤–∏—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏", callback_data="admin_update_metrics")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_users_list")],
        [InlineKeyboardButton("üí∞ –î–æ–¥–∞—Ç–∏ –∑–æ–ª–æ—Ç–æ", callback_data="admin_add_gold")],
        [InlineKeyboardButton("üíæ –°—Ç–≤–æ—Ä–∏—Ç–∏ backup", callback_data="admin_backup")],
        [InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏", callback_data="admin_game_settings")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", callback_data="admin_restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        admin_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def update_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Update and show metrics"""
    await game_metrics.update_metrics(db)
    
    metrics_text = f"""
üìä **–ú–µ—Ç—Ä–∏–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{game_metrics.get_metrics_text()}
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        metrics_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show list of all users"""
    users = await db.get_all_users()
    
    users_text = f"""
üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
–í—Å—å–æ–≥–æ: {len(users)}

"""
    
    for user in users[:20]:  # Show first 20 users
        user_line = f"‚Ä¢ {user['username'] or 'Unknown'} (ID: {user['user_id']})"
        if user.get('name'):
            user_line += f" - {user['name']} (–†—ñ–≤–µ–Ω—å {user.get('level', 1)})"
        users_text += user_line + "\n"
    
    if len(users) > 20:
        users_text += f"\n... —Ç–∞ —â–µ {len(users) - 20} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        users_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def create_backup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Create database backup"""
    try:
        backup_file = await db.create_backup()
        
        backup_text = f"""
‚úÖ **Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÅ –§–∞–π–ª: {backup_file}
üìÖ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Backup –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ /backups/
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            backup_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Backup creation failed: {e}")
        await update.callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ backup!", show_alert=True)


async def show_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show broadcast menu"""
    broadcast_text = """
üì¢ **–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:

(–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º)
"""
    
    context.user_data['waiting_for_broadcast'] = True
    
    keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        broadcast_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def process_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process broadcast message"""
    if not context.user_data.get('waiting_for_broadcast'):
        return
    
    user_id = update.effective_user.id
    if user_id != config.ADMIN_USER_ID:
        return
    
    broadcast_text = update.message.text
    context.user_data['waiting_for_broadcast'] = False
    
    # Get all users
    all_users = await db.get_all_users()
    
    sent_count = 0
    failed_count = 0
    
    status_message = await update.message.reply_text("üì§ –†–æ–∑–ø–æ—á–∞—Ç–æ —Ä–æ–∑—Å–∏–ª–∫—É...")
    
    for user in all_users:
        try:
            await context.bot.send_message(
                chat_id=user['user_id'],
                text=f"üì¢ **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:**\n\n{broadcast_text}",
                parse_mode='Markdown'
            )
            sent_count += 1
            
            # Update status every 10 messages
            if sent_count % 10 == 0:
                await status_message.edit_text(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(all_users)}")
                
        except Exception as e:
            failed_count += 1
            logger.error(f"Failed to send broadcast to {user['user_id']}: {e}")
    
    final_text = f"""
‚úÖ **–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏: {failed_count}
üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(all_users)}
"""
    
    await status_message.edit_text(final_text, parse_mode='Markdown')


async def show_game_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show game settings"""
    settings_text = f"""
‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**
‚Ä¢ –ú–∞–∫—Å. —Ä—ñ–≤–µ–Ω—å: {config.MAX_LEVEL}
‚Ä¢ –ë–∞–∑–æ–≤–∏–π –¥–æ—Å–≤—ñ–¥: {config.BASE_EXP_REQUIRED}
‚Ä¢ –ú–Ω–æ–∂–Ω–∏–∫ –¥–æ—Å–≤—ñ–¥—É: {config.EXP_MULTIPLIER}
‚Ä¢ –ú–∞–∫—Å. –≥—Ä–∞–≤—Ü—ñ–≤: {config.MAX_PLAYERS_PER_SERVER}
‚Ä¢ –Ü–Ω—Ç–µ—Ä–≤–∞–ª backup: {config.BACKUP_INTERVAL_HOURS} –≥–æ–¥
‚Ä¢ Debug —Ä–µ–∂–∏–º: {config.DEBUG_MODE}

**–í–∞—Ä—Ç—ñ—Å—Ç—å –≤—Ö–æ–¥—É –≤ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è:**
‚Ä¢ –°–∫–ª–µ–ø: {config.DUNGEON_ENTRY_COSTS['crypt']} –∑–æ–ª–æ—Ç–∞
‚Ä¢ –ü–µ—á–µ—Ä–∞ –æ—Ä–∫—ñ–≤: {config.DUNGEON_ENTRY_COSTS['orcs']} –∑–æ–ª–æ—Ç–∞
‚Ä¢ –í–µ–∂–∞ —á–∞—Ä–æ–¥—ñ—è: {config.DUNGEON_ENTRY_COSTS['tower']} –∑–æ–ª–æ—Ç–∞
‚Ä¢ –õ–æ–≥–æ–≤–æ –¥—Ä–∞–∫–æ–Ω–∞: {config.DUNGEON_ENTRY_COSTS['dragon']} –∑–æ–ª–æ—Ç–∞
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        settings_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Restart bot (placeholder)"""
    await update.callback_query.answer(
        "‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Ç—Ä–µ–±—É—î —Ä—É—á–Ω–æ–≥–æ –≤—Ç—Ä—É—á–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ",
        show_alert=True
    )


async def backup_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /backup command"""
    user_id = update.effective_user.id
    
    if user_id != config.ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return
    
    try:
        backup_file = await db.create_backup()
        await update.message.reply_text(
            f"‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_file}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Backup failed: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ backup!")


async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /broadcast command"""
    user_id = update.effective_user.id
    
    if user_id != config.ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        return
    
    # Get message text after command
    message_text = update.message.text.replace('/broadcast', '').strip()
    
    if not message_text:
        await update.message.reply_text(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /broadcast <—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>",
            parse_mode='Markdown'
        )
        return
    
    # Get all users
    all_users = await db.get_all_users()
    
    sent_count = 0
    failed_count = 0
    
    status_message = await update.message.reply_text("üì§ –†–æ–∑–ø–æ—á–∞—Ç–æ —Ä–æ–∑—Å–∏–ª–∫—É...")
    
    for user in all_users:
        try:
            await context.bot.send_message(
                chat_id=user['user_id'],
                text=f"üì¢ **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:**\n\n{message_text}",
                parse_mode='Markdown'
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1
            logger.error(f"Failed to send broadcast to {user['user_id']}: {e}")
    
    await status_message.edit_text(
        f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ü–æ–º–∏–ª–æ–∫: {failed_count}",
        parse_mode='Markdown'
    )


async def show_add_gold_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show add gold menu"""
    # Get all users with characters
    all_users = await db.get_all_users()
    users_with_characters = []
    
    for user in all_users:
        character = await db.get_character(user['user_id'])
        if character:
            users_with_characters.append({
                'user_id': user['user_id'],
                'username': user['username'],
                'character_name': character.name,
                'current_gold': character.gold,
                'level': character.level
            })
    
    # Sort by level (highest first)
    users_with_characters.sort(key=lambda x: x['level'], reverse=True)
    
    gold_text = f"""
üí∞ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–ª–æ—Ç–∞**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–ª–æ—Ç–∞:**
**–ì—Ä–∞–≤—Ü—ñ –∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ ({len(users_with_characters)}):**
"""
    
    keyboard = []
    
    for user in users_with_characters[:20]:  # Show first 20 users
        display_name = user['username'] or f"User{user['user_id']}"
        button_text = f"{user['character_name']} ({display_name}) - {user['current_gold']}üí∞"
        keyboard.append([InlineKeyboardButton(
            button_text,
            callback_data=f"admin_add_gold_user_{user['user_id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_panel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        gold_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def process_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE, user_action: str) -> None:
    """Process user-related actions"""
    if user_action.startswith("add_gold_user_"):
        user_id = int(user_action.replace("add_gold_user_", ""))
        await show_user_gold_options(update, context, user_id)
    
    elif user_action.startswith("quick_gold_"):
        amount = int(user_action.replace("quick_gold_", ""))
        await show_quick_gold_users(update, context, amount)


async def show_user_gold_options(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """Show gold options for specific user"""
    character = await db.get_character(target_user_id)
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    user = await db.get_user(target_user_id)
    display_name = user.username if user else f"User{target_user_id}"
    
    gold_text = f"""
üí∞ **–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–ª–æ—Ç–∞**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ **–ì—Ä–∞–≤–µ—Ü—å:** {character.name}
üì± **Username:** {display_name}
‚≠ê **–†—ñ–≤–µ–Ω—å:** {character.level}
üí∞ **–ü–æ—Ç–æ—á–Ω–µ –∑–æ–ª–æ—Ç–æ:** {character.gold:,}

**–û–±–µ—Ä—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:**
"""
    
    keyboard = []
    
    # Quick amounts
    amounts = [100, 250, 500, 1000, 2500, 5000, 10000, 25000, 50000, 100000]
    for i in range(0, len(amounts), 2):
        row = []
        row.append(InlineKeyboardButton(
            f"+{amounts[i]:,}üí∞",
            callback_data=f"admin_give_gold_{target_user_id}_{amounts[i]}"
        ))
        if i + 1 < len(amounts):
            row.append(InlineKeyboardButton(
                f"+{amounts[i+1]:,}üí∞",
                callback_data=f"admin_give_gold_{target_user_id}_{amounts[i+1]}"
            ))
        keyboard.append(row)
    
    # Custom amount
    keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–ª–∞—Å–Ω–∞ —Å—É–º–∞", callback_data=f"admin_custom_gold_{target_user_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="admin_add_gold")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        gold_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def show_quick_gold_users(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int) -> None:
    """Show users for quick gold addition"""
    # Get all users with characters
    all_users = await db.get_all_users()
    users_with_characters = []
    
    for user in all_users:
        character = await db.get_character(user['user_id'])
        if character:
            users_with_characters.append({
                'user_id': user['user_id'],
                'username': user['username'],
                'character_name': character.name,
                'current_gold': character.gold,
                'level': character.level
            })
    
    # Sort by level (highest first)
    users_with_characters.sort(key=lambda x: x['level'], reverse=True)
    
    gold_text = f"""
üí∞ **–î–æ–¥–∞—Ç–∏ +{amount:,} –∑–æ–ª–æ—Ç–∞**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞–≤—Ü—è:**
"""
    
    keyboard = []
    
    for user in users_with_characters[:20]:  # Show first 20 users
        display_name = user['username'] or f"User{user['user_id']}"
        button_text = f"{user['character_name']} ({display_name})"
        keyboard.append([InlineKeyboardButton(
            button_text,
            callback_data=f"admin_give_gold_{user['user_id']}_{amount}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="admin_add_gold")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        gold_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def give_gold_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int, amount: int) -> None:
    """Give gold to specific user"""
    try:
        # Get current character
        character = await db.get_character(target_user_id)
        if not character:
            await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        # Update gold
        new_gold = character.gold + amount
        await db.update_character_by_id(target_user_id, {'gold': new_gold})
        
        # Get user info
        user = await db.get_user(target_user_id)
        display_name = user.username if user else f"User{target_user_id}"
        
        # Log the action
        admin_user_id = update.effective_user.id
        logger.info(f"Admin {admin_user_id} gave {amount:,} gold to user {target_user_id} ({display_name})")
        
        # Show success message
        success_text = f"""
‚úÖ **–ó–æ–ª–æ—Ç–æ –¥–æ–¥–∞–Ω–æ!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ **–ì—Ä–∞–≤–µ—Ü—å:** {character.name}
üì± **Username:** {display_name}
üí∞ **–î–æ–¥–∞–Ω–æ:** +{amount:,} –∑–æ–ª–æ—Ç–∞
üí∞ **–ù–æ–≤–µ –∑–æ–ª–æ—Ç–æ:** {new_gold:,}

**–î—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.**
"""
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –î–æ–¥–∞—Ç–∏ —â–µ –∑–æ–ª–æ—Ç–∞", callback_data=f"admin_add_gold_user_{target_user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_add_gold")],
            [InlineKeyboardButton("üè† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            success_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error giving gold to user {target_user_id}: {e}")
        await update.callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–æ–ª–æ—Ç–∞!", show_alert=True)


async def show_custom_gold_input(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """Show custom gold input interface"""
    character = await db.get_character(target_user_id)
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    user = await db.get_user(target_user_id)
    display_name = user.username if user else f"User{target_user_id}"
    
    gold_text = f"""
üí∞ **–í–ª–∞—Å–Ω–∞ —Å—É–º–∞ –∑–æ–ª–æ—Ç–∞**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ **–ì—Ä–∞–≤–µ—Ü—å:** {character.name}
üì± **Username:** {display_name}
üí∞ **–ü–æ—Ç–æ—á–Ω–µ –∑–æ–ª–æ—Ç–æ:** {character.gold:,}

**–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:**
(–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1500, 10000, 50000)
"""
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"admin_add_gold_user_{target_user_id}")],
        [InlineKeyboardButton("üè† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        gold_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def process_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process admin message input (broadcast or custom gold)"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if user_id != config.ADMIN_USER_ID:
        return
    
    # Check if we're waiting for custom gold input
    if 'custom_gold_user_id' in context.user_data:
        await process_custom_gold_input(update, context)
        return
    
    # Check if we're waiting for broadcast message
    if 'waiting_for_broadcast' in context.user_data:
        await process_broadcast(update, context)
        return
    
    # Default: treat as broadcast message
    await process_broadcast(update, context)


async def process_custom_gold_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process custom gold amount input"""
    user_id = update.effective_user.id
    
    # Check if user is admin
    if user_id != config.ADMIN_USER_ID:
        return
    
    # Get target user ID from context
    target_user_id = context.user_data.get('custom_gold_user_id')
    if not target_user_id:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ü—ñ–ª—å–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è!")
        return
    
    # Get amount from message
    try:
        amount = int(update.message.text.strip())
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
            return
        if amount > 1000000:  # Limit to 1 million
            await update.message.reply_text("‚ùå –°—É–º–∞ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 1,000,000!")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!")
        return
    
    # Give gold
    try:
        character = await db.get_character(target_user_id)
        if not character:
            await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        new_gold = character.gold + amount
        await db.update_character_by_id(target_user_id, {'gold': new_gold})
        
        user = await db.get_user(target_user_id)
        display_name = user.username if user else f"User{target_user_id}"
        
        # Log the action
        logger.info(f"Admin {user_id} gave {amount:,} gold to user {target_user_id} ({display_name})")
        
        success_text = f"""
‚úÖ **–ó–æ–ª–æ—Ç–æ –¥–æ–¥–∞–Ω–æ!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ **–ì—Ä–∞–≤–µ—Ü—å:** {character.name}
üì± **Username:** {display_name}
üí∞ **–î–æ–¥–∞–Ω–æ:** +{amount:,} –∑–æ–ª–æ—Ç–∞
üí∞ **–ù–æ–≤–µ –∑–æ–ª–æ—Ç–æ:** {new_gold:,}

**–î—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.**
"""
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –î–æ–¥–∞—Ç–∏ —â–µ –∑–æ–ª–æ—Ç–∞", callback_data=f"admin_add_gold_user_{target_user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="admin_add_gold")],
            [InlineKeyboardButton("üè† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            success_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # Clear custom gold user ID
        if 'custom_gold_user_id' in context.user_data:
            del context.user_data['custom_gold_user_id']
        
    except Exception as e:
        logger.error(f"Error giving custom gold to user {target_user_id}: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–æ–ª–æ—Ç–∞!")