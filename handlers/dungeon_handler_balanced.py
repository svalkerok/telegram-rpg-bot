"""
–û–ù–û–í–õ–ï–ù–ò–ô DUNGEON HANDLER –∑ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –±–∞–ª–∞–Ω—Å—É V2.0
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ–∫—Ä–∞—â–µ–Ω—É –±–æ–π–æ–≤—É —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏—Ö –±–æ—ó–≤
"""

import logging
from typing import Dict, Any, Optional, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler
from database.database_models import Character
from database.db_manager import DatabaseManager
from game_logic.character import CharacterManager
from game_logic.combat_v2 import CombatManager, CombatAction, CombatResult  # –ù–û–í–ê –°–ò–°–¢–ï–ú–ê!
from game_logic.enemies import EnemyManager, EnemyType
from game_logic.items import ItemManager
from handlers.character_handler import character_required
import random

logger = logging.getLogger(__name__)

class BalancedDungeonHandler:
    """–û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è –∑ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ—é –±–æ–π–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é"""
    
    def __init__(self):
        self.db_manager = DatabaseManager()
        self.character_manager = CharacterManager(self.db_manager)
        self.enemy_manager = EnemyManager()
        self.item_manager = ItemManager()
        self.combat_manager = CombatManager(self.character_manager, self.item_manager)  # –ù–û–í–ò–ô –ú–ï–ù–ï–î–ñ–ï–†!
        
        # –†—ñ–≤–Ω—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è
        self.difficulty_levels = {
            1: 'dungeon_floor_1',   # 110% —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
            2: 'dungeon_floor_2',   # 125% —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ  
            3: 'dungeon_floor_3'    # 140% —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        }
        
        # –ü—Ä–æ–≥—Ä–µ—Å—ñ—è –ø—ñ–¥–∑–µ–º–µ–ª–ª—è
        self.floor_progression = {
            1: {"enemies": 3, "boss": False, "min_level": 1},
            2: {"enemies": 4, "boss": False, "min_level": 3},
            3: {"enemies": 5, "boss": True, "min_level": 5}
        }
    
    @character_required
    async def dungeon_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, character: Character):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –ø—ñ–¥–∑–µ–º–µ–ª–ª—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ"""
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∏–ª—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        total_stats = self.character_manager.get_total_stats(character)
        player_power = self._calculate_player_power(total_stats, character.level)
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
        text = "üè∞ **–ü–Ü–î–ó–ï–ú–ï–õ–õ–Ø –¢–Ü–ù–ï–ô**\n\n"
        text += f"üßô {character.name} (—Ä—ñ–≤–µ–Ω—å {character.level})\n"
        text += f"üí™ –ë–æ–π–æ–≤–∞ —Å–∏–ª–∞: {player_power}\n\n"
        
        text += "–û–±–µ—Ä—ñ—Ç—å –ø–æ–≤–µ—Ä—Ö –ø—ñ–¥–∑–µ–º–µ–ª–ª—è:\n\n"
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏  
        keyboard = []
        
        for floor, config in self.floor_progression.items():
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
            if character.level >= config["min_level"]:
                if character.level >= config["min_level"] + 3:
                    difficulty_emoji = "üü¢"
                    difficulty_text = "–õ–µ–≥–∫–æ"
                elif character.level >= config["min_level"] + 1:
                    difficulty_emoji = "üü°"
                    difficulty_text = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ"
                else:
                    difficulty_emoji = "üü†"
                    difficulty_text = "–í–∏–∫–ª–∏–∫"
            else:
                difficulty_emoji = "üî¥"
                difficulty_text = "–ù–µ–±–µ–∑–ø–µ—á–Ω–æ"
            
            button_text = f"{difficulty_emoji} –ü–æ–≤–µ—Ä—Ö {floor} ({difficulty_text})"
            keyboard.append([InlineKeyboardButton(
                button_text, 
                callback_data=f"dungeon_floor_{floor}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text += "\nüí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –ó–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä –æ–∑–Ω–∞—á–∞—î –ª–µ–≥–∫–∏–π –±—ñ–π, –∂–æ–≤—Ç–∏–π - –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π, –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π - —Å–∫–ª–∞–¥–Ω–∏–π, —á–µ—Ä–≤–æ–Ω–∏–π - –¥—É–∂–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ!"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    @character_required
    async def enter_dungeon_floor(self, update: Update, context: ContextTypes.DEFAULT_TYPE, character: Character):
        """–£–≤—ñ–π—Ç–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö –ø—ñ–¥–∑–µ–º–µ–ª–ª—è"""
        
        query = update.callback_query
        floor = int(query.data.split('_')[-1])
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ–¥–∑–µ–º–µ–ª–ª—è
        context.user_data['dungeon'] = {
            'floor': floor,
            'enemies_defeated': 0,
            'total_enemies': self.floor_progression[floor]['enemies'],
            'has_boss': self.floor_progression[floor]['boss'],
            'difficulty': self.difficulty_levels[floor]
        }
        
        text = f"üè∞ **–ü–û–í–ï–†–• {floor} –ü–Ü–î–ó–ï–ú–ï–õ–õ–Ø**\n\n"
        text += "–í–∏ –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç–µ–º–Ω—ñ –∫–æ—Ä–∏–¥–æ—Ä–∏ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è...\n"
        text += "–î–µ—Å—å –ø–æ–ø–µ—Ä–µ–¥—É —á—É—î—Ç—å—Å—è —Å–∫—Ä–µ–≥—ñ—Ç –∫—ñ—Å—Ç–æ–∫ —ñ —Ä–∏–ø—ñ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤.\n\n"
        
        if floor == 1:
            text += "üíÄ –ù–∞ —Ü—å–æ–º—É –ø–æ–≤–µ—Ä—Å—ñ –º–µ—à–∫–∞—é—Ç—å —Å–∫–µ–ª–µ—Ç–∏ —Ç–∞ –∑–æ–º–±—ñ\n"
        elif floor == 2:
            text += "üëπ –¢—É—Ç –ø–∞–Ω—É—é—Ç—å –æ—Ä–∫–∏ —Ç–∞ —Ç–µ–º–Ω—ñ –ª–∏—Ü–∞—Ä—ñ\n"
        else:
            text += "‚ò†Ô∏è –ù–∞–π–≥–ª–∏–±—à–∏–π –ø–æ–≤–µ—Ä—Ö. –¢—É—Ç –ø—Ä–∞–≤–∏—Ç—å —Å–∞–º –õ—ñ—á!\n"
        
        text += f"‚öîÔ∏è –í–æ—Ä–æ–≥—ñ–≤ –¥–æ –±–∏—Ç–≤–∏: {self.floor_progression[floor]['enemies']}\n"
        
        if self.floor_progression[floor]['boss']:
            text += "üëë –ù–∞ —Ü—å–æ–º—É –ø–æ–≤–µ—Ä—Å—ñ —î –ë–û–°!\n"
        
        keyboard = [
            [InlineKeyboardButton("‚öîÔ∏è –ü–æ—á–∞—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è", callback_data="dungeon_explore")],
            [InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="dungeon_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    @character_required  
    async def explore_dungeon(self, update: Update, context: ContextTypes.DEFAULT_TYPE, character: Character):
        """–î–æ—Å–ª—ñ–¥–∏—Ç–∏ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è —Ç–∞ –∑—É—Å—Ç—Ä—ñ—Ç–∏ –≤–æ—Ä–æ–≥–∞"""
        
        query = update.callback_query
        dungeon_state = context.user_data.get('dungeon', {})
        
        if not dungeon_state:
            await self.dungeon_menu(update, context, character)
            return
        
        floor = dungeon_state['floor']
        difficulty = dungeon_state['difficulty']
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–æ—Ä–æ–≥–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤–µ—Ä—Ö—É
        if dungeon_state['enemies_defeated'] < dungeon_state['total_enemies']:
            # –ó–≤–∏—á–∞–π–Ω–∏–π –≤–æ—Ä–æ–≥
            enemy = self.enemy_manager.get_random_enemy_for_location(
                EnemyType.DUNGEON, 
                character.level
            )
            
            if not enemy:
                # Fallback –Ω–∞ —Å–∫–µ–ª–µ—Ç–∞-–≤–æ—ó–Ω–∞
                enemy = self.enemy_manager.get_enemy('skeleton_warrior')
            
            is_boss = False
            
        elif dungeon_state['has_boss'] and dungeon_state['enemies_defeated'] == dungeon_state['total_enemies']:
            # –ë–æ—Å –ø–æ–≤–µ—Ä—Ö—É
            boss_enemies = ['death_knight', 'lich', 'dungeon_overlord']
            boss_id = boss_enemies[min(floor-1, len(boss_enemies)-1)]
            enemy = self.enemy_manager.get_enemy(boss_id)
            is_boss = True
            difficulty = 'boss'  # –ë–æ—Å–∏ —Å–∫–ª–∞–¥–Ω—ñ—à—ñ
            
        else:
            # –ü—ñ–¥–∑–µ–º–µ–ª–ª—è –ø—Ä–æ–π–¥–µ–Ω–æ
            await self.complete_dungeon(update, context, character)
            return
        
        if not enemy:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–æ—Ä–æ–≥–∞!")
            return
        
        # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –≤–æ—Ä–æ–≥–∞ –ø—ñ–¥ –≥—Ä–∞–≤—Ü—è –∑ –Ω–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é –±–∞–ª–∞–Ω—Å—É!
        try:
            scaled_enemy = self.combat_manager.balance_system.scale_enemy_for_player(
                enemy.to_dict(),
                character, 
                difficulty
            )
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á
            encounter_text = self._generate_encounter_text(scaled_enemy, floor, is_boss)
            
            # –ê–Ω–∞–ª—ñ–∑ –±–∞–ª–∞–Ω—Å—É –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            total_stats = self.character_manager.get_total_stats(character)
            player_power = self.combat_manager.balance_system._calculate_player_power(total_stats, character.level)
            enemy_power = scaled_enemy.max_health + scaled_enemy.attack * 8 + scaled_enemy.defense * 6
            
            encounter_text += f"\nüìä **–ê–Ω–∞–ª—ñ–∑ –±–æ—é:**\n"
            encounter_text += f"üí™ –í–∞—à–∞ —Å–∏–ª–∞: {player_power}\n"
            encounter_text += f"üëπ –°–∏–ª–∞ –≤–æ—Ä–æ–≥–∞: {enemy_power}\n"
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –±–æ—é
            if player_power > enemy_power * 1.3:
                prediction = "üü¢ –õ–µ–≥–∫–∞ –ø–µ—Ä–µ–º–æ–≥–∞"
            elif player_power > enemy_power:
                prediction = "üü° –•–æ—Ä–æ—à—ñ —à–∞–Ω—Å–∏"
            elif player_power * 1.2 > enemy_power:
                prediction = "üü† –†—ñ–≤–Ω–∏–π –±—ñ–π"
            else:
                prediction = "üî¥ –°–∫–ª–∞–¥–Ω–∏–π –±—ñ–π"
            
            encounter_text += f"üéØ –ü—Ä–æ–≥–Ω–æ–∑: {prediction}\n"
            
            keyboard = [
                [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫—É–≤–∞—Ç–∏", callback_data="dungeon_combat_attack")],
                [InlineKeyboardButton("üõ°Ô∏è –ó–∞—Ö–∏—â–∞—Ç–∏—Å—è", callback_data="dungeon_combat_defend")],
                [InlineKeyboardButton("üí® –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—Ç–µ–∫—Ç–∏", callback_data="dungeon_combat_flee")]
            ]
            
            # –î–æ–¥–∞—î–º–æ –º–∞–≥—ñ—á–Ω—É –∞—Ç–∞–∫—É —è–∫—â–æ —î –º–∞–≥—ñ—á–Ω–∞ —Å–∏–ª–∞
            if total_stats.get('magic_power', 0) > 0:
                keyboard.insert(1, [InlineKeyboardButton("üîÆ –ú–∞–≥—ñ—á–Ω–∞ –∞—Ç–∞–∫–∞", callback_data="dungeon_combat_magic")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–æ—Ä–æ–≥–∞ —Ç–∞ —Å—Ç–∞–Ω –±–æ—é
            context.user_data['combat'] = {
                'enemy': scaled_enemy,
                'is_boss': is_boss,
                'location': 'dungeon'
            }
            
            await query.edit_message_text(encounter_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error scaling enemy for player: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Å–∏—Å—Ç–µ–º—É
            await self._fallback_combat(query, character, enemy, is_boss)
    
    def _generate_encounter_text(self, enemy, floor: int, is_boss: bool) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ –≤–æ—Ä–æ–≥–æ–º"""
        
        if is_boss:
            text = f"üëë **–ë–û–° –ü–û–í–ï–†–•–£ {floor}!**\n\n"
            text += f"{enemy.emoji} **{enemy.name}**\n"
            text += f"_{enemy.description}_\n\n"
            text += "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —Ü—å–æ–≥–æ –ø–æ–≤–µ—Ä—Ö—É –±–ª–æ–∫—É—î –≤–∞–º —à–ª—è—Ö!\n"
            text += "–¶–µ –±—É–¥–µ –µ–ø—ñ—á–Ω–∞ –±–∏—Ç–≤–∞!\n\n"
        else:
            encounter_scenarios = [
                "–í–∏ —á—É—î—Ç–µ –∫—Ä–æ–∫–∏ –≤ —Ç–µ–º—Ä—è–≤—ñ...",
                "–ó-–∑–∞ –∫—É—Ç–∞ –≤–∏—Ä–∏–Ω–∞—î –ø–æ—Å—Ç–∞—Ç—å...", 
                "–†–∞–ø—Ç–æ–≤–æ —â–æ—Å—å –∞—Ç–∞–∫—É—î –≤–∞—Å!",
                "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –∑'—è–≤–ª—è—î—Ç—å—Å—è –≤–æ—Ä–æ–≥!",
                "–í–∏ –ø–æ—Ç—Ä–∞–ø–ª—è—î—Ç–µ –≤ –∑–∞—Å—ñ–¥–∫—É!"
            ]
            
            text = f"üè∞ **–ü–û–í–ï–†–• {floor} - –ó–£–°–¢–†–Ü–ß!**\n\n"
            text += f"{random.choice(encounter_scenarios)}\n\n"
            text += f"{enemy.emoji} **{enemy.name}**\n"
            text += f"_{enemy.description}_\n\n"
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–æ–≥–∞ (–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ)
        text += f"üìä **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
        text += f"‚≠ê –†—ñ–≤–µ–Ω—å: {enemy.level}\n"
        text += f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {enemy.max_health}\n"
        text += f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {enemy.attack}\n"
        text += f"üõ°Ô∏è –ó–∞—Ö–∏—Å—Ç: {enemy.defense}\n"
        
        return text
    
    @character_required
    async def process_combat_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, character: Character):
        """–û–±—Ä–æ–±–∏—Ç–∏ –¥—ñ—é –≤ –±–æ—é –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
        
        query = update.callback_query
        combat_state = context.user_data.get('combat', {})
        
        if not combat_state:
            await self.dungeon_menu(update, context, character)
            return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—é
        action_map = {
            'dungeon_combat_attack': CombatAction.ATTACK,
            'dungeon_combat_defend': CombatAction.DEFEND, 
            'dungeon_combat_magic': CombatAction.MAGIC_ATTACK,
            'dungeon_combat_flee': CombatAction.FLEE
        }
        
        action = action_map.get(query.data, CombatAction.ATTACK)
        enemy = combat_state['enemy']
        
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –±—ñ–π!
            dungeon_difficulty = context.user_data['dungeon'].get('difficulty', 'dungeon_floor_1')
            
            combat_result = await self.combat_manager.start_combat(
                character, 
                enemy, 
                auto_combat=False,
                location_difficulty=dungeon_difficulty
            )
            
            if combat_result['result'] == CombatResult.ONGOING:
                # –û–±—Ä–æ–±–ª—è—î–º–æ –¥—ñ—é –≥—Ä–∞–≤—Ü—è
                turn_result = await self.combat_manager.process_player_action(
                    combat_result['state'], 
                    action
                )
                
                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ö—ñ–¥
                combat_text = self._format_combat_turn(turn_result, character, enemy)
                
                if turn_result['result'] == CombatResult.ONGOING:
                    # –ë—ñ–π —Ç—Ä–∏–≤–∞—î
                    keyboard = self._get_combat_keyboard(character)
                    await query.edit_message_text(combat_text, reply_markup=keyboard, parse_mode='Markdown')
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
                    context.user_data['combat']['state'] = turn_result['state']
                else:
                    # –ë—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                    await self._handle_combat_end(query, context, character, turn_result)
            else:
                # –ë—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ –æ–¥—Ä–∞–∑—É (–≤—Ç–µ—á–∞)
                await self._handle_combat_end(query, context, character, combat_result)
                
        except Exception as e:
            logger.error(f"Combat processing error: {e}")
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –±–æ–π–æ–≤—ñ–π —Å–∏—Å—Ç–µ–º—ñ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è...",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè∞ –ü—ñ–¥–∑–µ–º–µ–ª–ª—è", callback_data="dungeon_menu")]])
            )
    
    def _format_combat_turn(self, turn_result: Dict[str, Any], character: Character, enemy) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥—É –±–æ—é"""
        
        text = f"‚öîÔ∏è **–ë–Ü–ô –¢–†–ò–í–ê–Ñ!**\n\n"
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ö–æ–¥–∏
        if 'last_turns' in turn_result:
            for turn in turn_result['last_turns']:
                text += f"{turn.message}\n"
        
        text += f"\nüìä **–°—Ç–∞–Ω —É—á–∞—Å–Ω–∏–∫—ñ–≤:**\n"
        text += f"üë§ {character.name}: {character.health}/{character.max_health} HP\n"
        text += f"{enemy.emoji} {enemy.name}: {enemy.health}/{enemy.max_health} HP\n\n"
        
        # –°–º—É–≥–∫–∏ –∑–¥–æ—Ä–æ–≤'—è
        char_hp_percent = character.health / character.max_health
        enemy_hp_percent = enemy.health / enemy.max_health
        
        char_bar = self._create_health_bar(char_hp_percent)
        enemy_bar = self._create_health_bar(enemy_hp_percent)
        
        text += f"üë§ {char_bar} {character.health} HP\n"
        text += f"{enemy.emoji} {enemy_bar} {enemy.health} HP\n"
        
        return text
    
    def _create_health_bar(self, percentage: float, length: int = 10) -> str:
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ–∑—É–∞–ª—å–Ω—É —Å–º—É–≥—É –∑–¥–æ—Ä–æ–≤'—è"""
        filled = int(percentage * length)
        empty = length - filled
        
        if percentage > 0.6:
            bar_char = "üü©"
        elif percentage > 0.3:
            bar_char = "üü®" 
        else:
            bar_char = "üü•"
            
        return bar_char * filled + "‚¨ú" * empty
    
    def _get_combat_keyboard(self, character: Character) -> InlineKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –±–æ—é"""
        
        total_stats = self.character_manager.get_total_stats(character)
        
        keyboard = [
            [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫—É–≤–∞—Ç–∏", callback_data="dungeon_combat_attack")],
            [InlineKeyboardButton("üõ°Ô∏è –ó–∞—Ö–∏—â–∞—Ç–∏—Å—è", callback_data="dungeon_combat_defend")]
        ]
        
        # –î–æ–¥–∞—î–º–æ –º–∞–≥—ñ—á–Ω—É –∞—Ç–∞–∫—É —è–∫—â–æ —î –º–∞–≥—ñ—á–Ω–∞ —Å–∏–ª–∞
        if total_stats.get('magic_power', 0) > 0:
            keyboard.insert(1, [InlineKeyboardButton("üîÆ –ú–∞–≥—ñ—á–Ω–∞ –∞—Ç–∞–∫–∞", callback_data="dungeon_combat_magic")])
        
        keyboard.append([InlineKeyboardButton("üí® –í—Ç–µ–∫—Ç–∏", callback_data="dungeon_combat_flee")])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def _handle_combat_end(self, query, context, character: Character, combat_result: Dict[str, Any]):
        """–û–±—Ä–æ–±–∏—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±–æ—é"""
        
        result_type = combat_result['result']
        
        if result_type == CombatResult.VICTORY:
            # –ü–µ—Ä–µ–º–æ–≥–∞!
            dungeon_state = context.user_data['dungeon']
            dungeon_state['enemies_defeated'] += 1
            
            text = "üéâ **–ü–ï–†–ï–ú–û–ì–ê!**\n\n"
            text += f"‚≠ê –û—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å–≤—ñ–¥—É: {combat_result['experience_gained']}\n"
            text += f"üí∞ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–ª–æ—Ç–∞: {combat_result['gold_gained']}\n"
            
            if combat_result.get('level_up'):
                text += f"\nüéä **–ü–Ü–î–í–ò–©–ï–ù–ù–Ø –†–Ü–í–ù–Ø!** –¢–µ–ø–µ—Ä {combat_result['new_level']} —Ä—ñ–≤–µ–Ω—å!\n"
            
            if combat_result['items_dropped']:
                text += "\nüéÅ **–ó–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏:**\n"
                for item_id in combat_result['items_dropped']:
                    text += f"‚Ä¢ {item_id}\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å –ø—ñ–¥–∑–µ–º–µ–ª–ª—è
            remaining = dungeon_state['total_enemies'] - dungeon_state['enemies_defeated']
            if remaining > 0:
                text += f"\nüè∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—è –≤–æ—Ä–æ–≥—ñ–≤: {remaining}"
                if dungeon_state['has_boss'] and remaining == 0:
                    text += " + –ë–û–°"
            
            keyboard = []
            if remaining > 0 or (dungeon_state['has_boss'] and dungeon_state['enemies_defeated'] == dungeon_state['total_enemies']):
                keyboard.append([InlineKeyboardButton("‚öîÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è", callback_data="dungeon_explore")])
            else:
                keyboard.append([InlineKeyboardButton("üéä –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è", callback_data="dungeon_complete")])
            
            keyboard.append([InlineKeyboardButton("üö™ –í–∏–π—Ç–∏ –∑ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è", callback_data="dungeon_menu")])
            
        elif result_type == CombatResult.DEFEAT:
            # –ü–æ—Ä–∞–∑–∫–∞
            character.health = 1  # –ó–∞–ª–∏—à–∞—î–º–æ 1 HP –∑–∞–º—ñ—Å—Ç—å —Å–º–µ—Ä—Ç—ñ
            text = "üíÄ **–ü–û–†–ê–ó–ö–ê!**\n\n"
            text += "–í–∏ –±—É–ª–∏ –ø–µ—Ä–µ–º–æ–∂–µ–Ω—ñ, –∞–ª–µ –≤—Å—Ç–∏–≥–ª–∏ –≤—Ç–µ–∫—Ç–∏...\n"
            text += "–ó–¥–æ—Ä–æ–≤'—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–æ 1 HP.\n\n"
            text += "üí° –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è!"
            
            keyboard = [
                [InlineKeyboardButton("üè∞ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è", callback_data="dungeon_menu")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
        else:  # FLEE_SUCCESS
            # –£—Å–ø—ñ—à–Ω–∞ –≤—Ç–µ—á–∞
            text = "üí® **–í–¢–ï–ß–ê –í–î–ê–õ–ê–°–Ø!**\n\n"
            text += "–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –∑ –±–æ—é.\n"
            text += "–Ü–Ω–æ–¥—ñ –≤—ñ–¥—Å—Ç—É–ø - –Ω–∞–π–∫—Ä–∞—â–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è."
            
            keyboard = [
                [InlineKeyboardButton("‚öîÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è", callback_data="dungeon_explore")],
                [InlineKeyboardButton("üö™ –í–∏–π—Ç–∏ –∑ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è", callback_data="dungeon_menu")]
            ]
        
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –±–æ—é
        if 'combat' in context.user_data:
            del context.user_data['combat']
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def complete_dungeon(self, update: Update, context: ContextTypes.DEFAULT_TYPE, character: Character):
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è"""
        
        query = update.callback_query
        dungeon_state = context.user_data.get('dungeon', {})
        floor = dungeon_state.get('floor', 1)
        
        # –ë–æ–Ω—É—Å–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–≤–µ—Ä—Ö—É
        bonus_exp = floor * 50
        bonus_gold = floor * 25
        
        character.experience += bonus_exp
        character.gold += bonus_gold
        
        text = f"üéä **–ü–û–í–ï–†–• {floor} –ó–ê–í–ï–†–®–ï–ù–û!**\n\n"
        text += "–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ —Ü–µ–π –ø–æ–≤–µ—Ä—Ö –ø—ñ–¥–∑–µ–º–µ–ª–ª—è!\n\n"
        text += f"üéÅ **–ë–æ–Ω—É—Å–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞:**\n"
        text += f"‚≠ê –î–æ—Å–≤—ñ–¥: +{bonus_exp}\n"
        text += f"üí∞ –ó–æ–ª–æ—Ç–æ: +{bonus_gold}\n\n"
        
        if floor < 3:
            text += f"üîì –í—ñ–¥–∫—Ä–∏—Ç–æ –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–≤–µ—Ä—Ö—É {floor + 1}!\n"
        else:
            text += "üèÜ –í–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—Å—Ç–∏–ª–∏ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è! –í—ñ—Ç–∞—î–º–æ!"
        
        keyboard = [
            [InlineKeyboardButton("üè∞ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è", callback_data="dungeon_menu")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ–¥–∑–µ–º–µ–ª–ª—è
        if 'dungeon' in context.user_data:
            del context.user_data['dungeon']
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.character_manager.save_character(character)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    def _calculate_player_power(self, player_stats: Dict, level: int) -> int:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É –±–æ–π–æ–≤—É —Å–∏–ª—É –≥—Ä–∞–≤—Ü—è (–¥—É–±–ª—é—î –∑ balance_system)"""
        
        attack = player_stats.get('attack', 10)
        defense = player_stats.get('defense', 5)
        max_health = player_stats.get('max_health', 100)
        speed = player_stats.get('speed', 10)
        crit_chance = player_stats.get('critical_chance', 5)
        
        power = (
            level * 20 +
            attack * 8 +
            defense * 6 +
            max_health * 0.4 +
            speed * 2 +
            crit_chance * 3
        )
        
        return int(power)
    
    async def _fallback_combat(self, query, character: Character, enemy, is_boss: bool):
        """–ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –±–æ—é —è–∫—â–æ –Ω–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø—Ä–∞—Ü—é—î"""
        
        text = f"‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞–ø–∞—Å–Ω–∞ –±–æ–π–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞\n\n"
        text += f"{enemy.emoji} **{enemy.name}**\n"
        text += f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {enemy.max_health}\n"
        text += f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {enemy.attack}\n\n"
        text += "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        
        keyboard = [
            [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫—É–≤–∞—Ç–∏", callback_data="dungeon_explore")],
            [InlineKeyboardButton("üö™ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="dungeon_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞
balanced_dungeon_handler = BalancedDungeonHandler()
