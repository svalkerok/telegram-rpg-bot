"""
Equipment and Inventory Handler for Telegram RPG Bot
Handles merchant, blacksmith, inventory management
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from database.db_manager import DatabaseManager
from game_logic.equipment import EquipmentManager, EquipmentType, CharacterClass
from game_logic.inventory_manager import InventoryManager
import config

logger = logging.getLogger(__name__)
db = DatabaseManager(config.DATABASE_URL)


async def show_merchant_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show merchant shop with class-specific items"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return
    
    equipment_manager = EquipmentManager(db)
    
    # Get available equipment for character class
    weapons = equipment_manager.get_class_equipment(character.character_class, "weapon")
    armor = equipment_manager.get_class_equipment(character.character_class, "armor")
    
    # Filter by level and affordable items
    affordable_weapons = [w for w in weapons if w.level_requirement <= character.level and w.base_price <= character.gold * 2]
    affordable_armor = [a for a in armor if a.level_requirement <= character.level and a.base_price <= character.gold * 2]
    
    class_names = {
        "warrior": "–≤–æ—ó–Ω–∞",
        "mage": "–º–∞–≥–∞", 
        "ranger": "—Ä–µ–π–Ω–¥–∂–µ—Ä–∞"
    }
    
    merchant_text = f"""
üè™ **–¢–æ—Ä–≥–æ–≤–µ—Ü—å –û–ª–∞—Ñ**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {int(character.gold):,}
üë§ –ö–ª–∞—Å: {class_names.get(character.character_class, character.character_class)}

‚öîÔ∏è **–ó–±—Ä–æ—è –¥–ª—è {class_names.get(character.character_class, character.character_class)}:**
"""
    
    for i, weapon in enumerate(affordable_weapons[:5], 1):
        status = "‚úÖ" if character.gold >= weapon.base_price else "‚ùå"
        quality_stars = "‚≠ê" * (weapon.quality.value.count("common") + weapon.quality.value.count("uncommon")*2 + weapon.quality.value.count("rare")*3 + weapon.quality.value.count("epic")*4 + weapon.quality.value.count("legendary")*5)
        
        merchant_text += f"\n{i}. {weapon.name} - {weapon.base_price:,} üí∞ {quality_stars}\n"
        merchant_text += f"   üìä –ê—Ç–∞–∫–∞: +{weapon.base_stats.attack} | –†—ñ–≤–µ–Ω—å: {weapon.level_requirement}+ {status}\n"
    
    merchant_text += f"\nüõ°Ô∏è **–ë—Ä–æ–Ω—è –¥–ª—è {class_names.get(character.character_class, character.character_class)}:**\n"
    
    for i, armor_item in enumerate(affordable_armor[:5], 1):
        status = "‚úÖ" if character.gold >= armor_item.base_price else "‚ùå"
        quality_stars = "‚≠ê" * (1 + armor_item.quality.value.count("uncommon") + armor_item.quality.value.count("rare")*2 + armor_item.quality.value.count("epic")*3 + armor_item.quality.value.count("legendary")*4)
        
        merchant_text += f"\n{i}. {armor_item.name} - {armor_item.base_price:,} üí∞ {quality_stars}\n"
        merchant_text += f"   üìä –ó–∞—Ö–∏—Å—Ç: +{armor_item.base_stats.defense} | –†—ñ–≤–µ–Ω—å: {armor_item.level_requirement}+ {status}\n"
    
    if not affordable_weapons and not affordable_armor:
        merchant_text += "\nüö´ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è —Ç–∞ –±—é–¥–∂–µ—Ç—É."
    
    keyboard = [
        [InlineKeyboardButton("‚öîÔ∏è –ö—É–ø–∏—Ç–∏ –∑–±—Ä–æ—é", callback_data="merchant_weapons")],
        [InlineKeyboardButton("üõ°Ô∏è –ö—É–ø–∏—Ç–∏ –±—Ä–æ–Ω—é", callback_data="merchant_armor")],
        [InlineKeyboardButton("üß™ –ö—É–ø–∏—Ç–∏ –∑—ñ–ª–ª—è", callback_data="merchant_potions")],
        [InlineKeyboardButton("üì¶ –ú—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            merchant_text, reply_markup=reply_markup, parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            merchant_text, reply_markup=reply_markup, parse_mode='Markdown'
        )


async def show_weapon_shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show weapons available for purchase"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    equipment_manager = EquipmentManager(db)
    all_weapons = equipment_manager.get_class_equipment(character.character_class, "weapon")
    
    # Filter weapons by level (show all available levels, not just affordable)
    available_weapons = [w for w in all_weapons if w.level_requirement <= character.level + 5]  # Show a few levels ahead
    
    class_names = {
        "warrior": "–≤–æ—ó–Ω–∞",
        "mage": "–º–∞–≥–∞", 
        "ranger": "—Ä–µ–π–Ω–¥–∂–µ—Ä–∞"
    }
    
    weapons_text = f"""
‚öîÔ∏è **–ó–±—Ä–æ—è –¥–ª—è {class_names.get(character.character_class, character.character_class)}**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {int(character.gold):,}
‚≠ê –†—ñ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character.level}

"""
    
    keyboard = []
    
    if not available_weapons:
        weapons_text += "üö´ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó –∑–±—Ä–æ—ó –¥–ª—è –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É."
    else:
        for weapon in available_weapons:
            can_afford = character.gold >= weapon.base_price
            level_ok = weapon.level_requirement <= character.level
            
            # Status indicators
            if level_ok and can_afford:
                status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ"
            elif level_ok and not can_afford:
                status = "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞"
            else:
                status = f"üìà –ü–æ—Ç—Ä—ñ–±–µ–Ω {weapon.level_requirement} —Ä—ñ–≤–µ–Ω—å"
            
            # Quality stars
            quality_mapping = {
                "common": "‚≠ê",
                "uncommon": "‚≠ê‚≠ê", 
                "rare": "‚≠ê‚≠ê‚≠ê",
                "epic": "‚≠ê‚≠ê‚≠ê‚≠ê",
                "legendary": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
            }
            quality_stars = quality_mapping.get(weapon.quality.value, "‚≠ê")
            
            weapons_text += f"üó° **{weapon.name}** {quality_stars}\n"
            weapons_text += f"   üí∞ –¶—ñ–Ω–∞: {weapon.base_price:,} –∑–æ–ª–æ—Ç–∞\n"
            weapons_text += f"   üìä –ê—Ç–∞–∫–∞: +{weapon.base_stats.attack}\n"
            weapons_text += f"   üìà –†—ñ–≤–µ–Ω—å: {weapon.level_requirement}+\n"
            weapons_text += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            
            if weapon.special_effects:
                weapons_text += f"   üåü –ï—Ñ–µ–∫—Ç–∏: "
                effects = [effect.description for effect in weapon.special_effects]
                weapons_text += ", ".join(effects) + "\n"
            
            weapons_text += f"   üìù {weapon.description}\n\n"
            
            # Add buy button if can purchase
            if level_ok and can_afford:
                keyboard.append([InlineKeyboardButton(
                    f"üí∞ –ö—É–ø–∏—Ç–∏ {weapon.name} ({weapon.base_price:,} üí∞)",
                    callback_data=f"buy_weapon_{weapon.id}"
                )])
    
    keyboard.extend([
        [InlineKeyboardButton("üõ°Ô∏è –ë—Ä–æ–Ω—è", callback_data="merchant_armor")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data="merchant_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        weapons_text, reply_markup=reply_markup, parse_mode='Markdown'
    )


async def show_armor_shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show armor available for purchase"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    equipment_manager = EquipmentManager(db)
    all_armor = equipment_manager.get_class_equipment(character.character_class, "armor")
    
    # Filter armor by level (show all available levels, not just affordable)
    available_armor = [a for a in all_armor if a.level_requirement <= character.level + 5]  # Show a few levels ahead
    
    class_names = {
        "warrior": "–≤–æ—ó–Ω–∞",
        "mage": "–º–∞–≥–∞", 
        "ranger": "—Ä–µ–π–Ω–¥–∂–µ—Ä–∞"
    }
    
    armor_text = f"""
üõ°Ô∏è **–ë—Ä–æ–Ω—è –¥–ª—è {class_names.get(character.character_class, character.character_class)}**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {int(character.gold):,}
‚≠ê –†—ñ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character.level}

"""
    
    keyboard = []
    
    if not available_armor:
        armor_text += "üö´ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó –±—Ä–æ–Ω—ñ –¥–ª—è –≤–∞—à–æ–≥–æ –∫–ª–∞—Å—É."
    else:
        for armor_item in available_armor:
            can_afford = character.gold >= armor_item.base_price
            level_ok = armor_item.level_requirement <= character.level
            
            # Status indicators
            if level_ok and can_afford:
                status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ"
            elif level_ok and not can_afford:
                status = "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞"
            else:
                status = f"üìà –ü–æ—Ç—Ä—ñ–±–µ–Ω {armor_item.level_requirement} —Ä—ñ–≤–µ–Ω—å"
            
            # Quality stars
            quality_mapping = {
                "common": "‚≠ê",
                "uncommon": "‚≠ê‚≠ê", 
                "rare": "‚≠ê‚≠ê‚≠ê",
                "epic": "‚≠ê‚≠ê‚≠ê‚≠ê",
                "legendary": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
            }
            quality_stars = quality_mapping.get(armor_item.quality.value, "‚≠ê")
            
            armor_text += f"üõ° **{armor_item.name}** {quality_stars}\n"
            armor_text += f"   üí∞ –¶—ñ–Ω–∞: {armor_item.base_price:,} –∑–æ–ª–æ—Ç–∞\n"
            armor_text += f"   üìä –ó–∞—Ö–∏—Å—Ç: +{armor_item.base_stats.defense}\n"
            armor_text += f"   üìà –†—ñ–≤–µ–Ω—å: {armor_item.level_requirement}+\n"
            armor_text += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            
            if armor_item.special_effects:
                armor_text += f"   üåü –ï—Ñ–µ–∫—Ç–∏: "
                effects = [effect.description for effect in armor_item.special_effects]
                armor_text += ", ".join(effects) + "\n"
            
            armor_text += f"   üìù {armor_item.description}\n\n"
            
            # Add buy button if can purchase
            if level_ok and can_afford:
                keyboard.append([InlineKeyboardButton(
                    f"üí∞ –ö—É–ø–∏—Ç–∏ {armor_item.name} ({armor_item.base_price:,} üí∞)",
                    callback_data=f"buy_armor_{armor_item.id}"
                )])
    
    keyboard.extend([
        [InlineKeyboardButton("‚öîÔ∏è –ó–±—Ä–æ—è", callback_data="merchant_weapons")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data="merchant_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        armor_text, reply_markup=reply_markup, parse_mode='Markdown'
    )


async def show_potion_shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show potions available for purchase"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    from game_logic.potion_manager import potion_manager
    
    potions = potion_manager.get_all_potions()
    
    potion_text = f"""
üß™ **–ó—ñ–ª–ª—è —Ç–∞ –µ–ª—ñ–∫—Å–∏—Ä–∏**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {int(character.gold):,}
‚≠ê –†—ñ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character.level}

"""
    
    keyboard = []
    
    # Group potions by type
    health_potions = potion_manager.get_potions_by_type('health')
    mana_potions = potion_manager.get_potions_by_type('mana')
    combat_potions = potion_manager.get_potions_by_type('combat')
    
    # Health potions
    potion_text += "üíö **–ó—ñ–ª–ª—è –∑–¥–æ—Ä–æ–≤'—è:**\n"
    for potion_id, potion in health_potions.items():
        can_afford = character.gold >= potion.price
        level_ok = potion.level_required <= character.level
        
        if level_ok and can_afford:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ"
        elif level_ok and not can_afford:
            status = "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞"
        else:
            status = f"üìà –ü–æ—Ç—Ä—ñ–±–µ–Ω {potion.level_required} —Ä—ñ–≤–µ–Ω—å"
        
        potion_text += f"üß™ **{potion.name}**\n"
        potion_text += f"   üí∞ –¶—ñ–Ω–∞: {potion.price:,} –∑–æ–ª–æ—Ç–∞\n"
        potion_text += f"   üíö –ï—Ñ–µ–∫—Ç: +{potion.effects['health']} HP\n"
        potion_text += f"   üìà –†—ñ–≤–µ–Ω—å: {potion.level_required}+\n"
        potion_text += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        potion_text += f"   üìù {potion.description}\n\n"
        
        if level_ok and can_afford:
            keyboard.append([InlineKeyboardButton(
                f"üí∞ –ö—É–ø–∏—Ç–∏ {potion.name} ({potion.price:,} üí∞)",
                callback_data=f"buy_potion_{potion.id}"
            )])
    
    # Mana potions
    potion_text += "‚ö° **–ó—ñ–ª–ª—è –º–∞–Ω–∏:**\n"
    for potion_id, potion in mana_potions.items():
        can_afford = character.gold >= potion.price
        level_ok = potion.level_required <= character.level
        
        if level_ok and can_afford:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ"
        elif level_ok and not can_afford:
            status = "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞"
        else:
            status = f"üìà –ü–æ—Ç—Ä—ñ–±–µ–Ω {potion.level_required} —Ä—ñ–≤–µ–Ω—å"
        
        potion_text += f"üß™ **{potion.name}**\n"
        potion_text += f"   üí∞ –¶—ñ–Ω–∞: {potion.price:,} –∑–æ–ª–æ—Ç–∞\n"
        potion_text += f"   ‚ö° –ï—Ñ–µ–∫—Ç: +{potion.effects['mana']} MP\n"
        potion_text += f"   üìà –†—ñ–≤–µ–Ω—å: {potion.level_required}+\n"
        potion_text += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        potion_text += f"   üìù {potion.description}\n\n"
        
        if level_ok and can_afford:
            keyboard.append([InlineKeyboardButton(
                f"üí∞ –ö—É–ø–∏—Ç–∏ {potion.name} ({potion.price:,} üí∞)",
                callback_data=f"buy_potion_{potion.id}"
            )])
    
    # Combat potions
    potion_text += "‚öîÔ∏è **–ë–æ–π–æ–≤—ñ –∑—ñ–ª–ª—è:**\n"
    for potion_id, potion in combat_potions.items():
        can_afford = character.gold >= potion.price
        level_ok = potion.level_required <= character.level
        
        if level_ok and can_afford:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ"
        elif level_ok and not can_afford:
            status = "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞"
        else:
            status = f"üìà –ü–æ—Ç—Ä—ñ–±–µ–Ω {potion.level_required} —Ä—ñ–≤–µ–Ω—å"
        
        potion_text += f"üß™ **{potion.name}**\n"
        potion_text += f"   üí∞ –¶—ñ–Ω–∞: {potion.price:,} –∑–æ–ª–æ—Ç–∞\n"
        
        # Show effects
        effects = []
        if 'temp_attack' in potion.effects:
            effects.append(f"‚öîÔ∏è +{potion.effects['temp_attack']} –∞—Ç–∞–∫–∞")
        if 'temp_defense' in potion.effects:
            effects.append(f"üõ°Ô∏è +{potion.effects['temp_defense']} –∑–∞—Ö–∏—Å—Ç")
        if 'temp_speed' in potion.effects:
            effects.append(f"‚ö° +{potion.effects['temp_speed']} —à–≤–∏–¥–∫—ñ—Å—Ç—å")
        if 'health_regen' in potion.effects:
            effects.append(f"üíö {potion.effects['health_regen']} HP/—Ö—ñ–¥")
        
        potion_text += f"   üåü –ï—Ñ–µ–∫—Ç–∏: {', '.join(effects)}\n"
        potion_text += f"   ‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {potion.effects.get('duration', 1)} —Ö–æ–¥—ñ–≤\n"
        potion_text += f"   üìà –†—ñ–≤–µ–Ω—å: {potion.level_required}+\n"
        potion_text += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        potion_text += f"   üìù {potion.description}\n\n"
        
        if level_ok and can_afford:
            keyboard.append([InlineKeyboardButton(
                f"üí∞ –ö—É–ø–∏—Ç–∏ {potion.name} ({potion.price:,} üí∞)",
                callback_data=f"buy_potion_{potion.id}"
            )])
    
    keyboard.extend([
        [InlineKeyboardButton("‚öîÔ∏è –ó–±—Ä–æ—è", callback_data="merchant_weapons")],
        [InlineKeyboardButton("üõ°Ô∏è –ë—Ä–æ–Ω—è", callback_data="merchant_armor")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data="merchant_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        potion_text, reply_markup=reply_markup, parse_mode='Markdown'
    )


async def show_potions_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show potions management menu"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    from game_logic.potion_manager import potion_manager
    
    # Get player's potions from database
    conn = await db.get_connection()
    async with conn.execute('''
        SELECT item_id, quantity FROM player_equipment 
        WHERE user_id = ? AND item_type = 'consumable' AND quantity > 0
    ''', (user_id,)) as cursor:
        potion_rows = await cursor.fetchall()
    
    potions_text = f"""
üß™ **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑—ñ–ª–ª—è–º**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ {character.name}
üí∞ –ó–æ–ª–æ—Ç–æ: {int(character.gold):,}

üß™ **–í–∞—à—ñ –∑—ñ–ª–ª—è:**
"""
    
    keyboard = []
    has_potions = False
    
    for row in potion_rows:
        potion_id = row['item_id']
        quantity = row['quantity']
        
        potion = potion_manager.get_potion(potion_id)
        if potion and quantity > 0:
            has_potions = True
            potions_text += f"üß™ **{potion.name}** x{quantity}\n"
            potions_text += f"   üìù {potion.description}\n"
            
            # Show effects
            effects = []
            if 'health' in potion.effects:
                effects.append(f"üíö+{potion.effects['health']} HP")
            if 'mana' in potion.effects:
                effects.append(f"‚ö°+{potion.effects['mana']} MP")
            if 'temp_attack' in potion.effects:
                effects.append(f"‚öîÔ∏è+{potion.effects['temp_attack']} –∞—Ç–∞–∫–∞")
            if 'temp_defense' in potion.effects:
                effects.append(f"üõ°Ô∏è+{potion.effects['temp_defense']} –∑–∞—Ö–∏—Å—Ç")
            if 'temp_speed' in potion.effects:
                effects.append(f"‚ö°+{potion.effects['temp_speed']} —à–≤–∏–¥–∫—ñ—Å—Ç—å")
            if 'health_regen' in potion.effects:
                effects.append(f"üíö{potion.effects['health_regen']} HP/—Ö—ñ–¥")
            
            if effects:
                potions_text += f"   üåü –ï—Ñ–µ–∫—Ç–∏: {' '.join(effects)}\n"
            
            potions_text += "\n"
            
            # Add use button
            keyboard.append([InlineKeyboardButton(
                f"üß™ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ {potion.name}",
                callback_data=f"use_potion_{potion.id}"
            )])
    
    if not has_potions:
        potions_text += "\nüîç –£ –≤–∞—Å –Ω–µ–º–∞—î –∑—ñ–ª–ª—è\n"
        potions_text += "üí° –ö—É–ø—ñ—Ç—å –∑—ñ–ª–ª—è —É —Ç–æ—Ä–≥–æ–≤—Ü—è!"
    
    # Add timestamp for message uniqueness
    import datetime
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    potions_text += f"\nüïê –û–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}"
    
    keyboard.extend([
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏ –∑—ñ–ª–ª—è", callback_data="merchant_potions")],
        [InlineKeyboardButton("üì¶ –ù–∞–∑–∞–¥ –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è", callback_data="inventory_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        potions_text, reply_markup=reply_markup, parse_mode='Markdown'
    )


async def buy_potion(update: Update, context: ContextTypes.DEFAULT_TYPE, potion_id: str) -> None:
    """Purchase a potion"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    from game_logic.potion_manager import potion_manager
    
    potion = potion_manager.get_potion(potion_id)
    if not potion:
        await update.callback_query.answer("‚ùå –ó—ñ–ª–ª—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # Check requirements
    if character.level < potion.level_required:
        await update.callback_query.answer(
            f"‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä—ñ–≤–µ–Ω—å {potion.level_required}!"
        )
        return
    
    if character.gold < potion.price:
        await update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞!")
        return
    
    # Purchase potion
    new_gold = character.gold - potion.price
    await db.update_character_by_id(user_id, {'gold': new_gold})
    
    # Add potion to inventory using InventoryManager
    inventory_manager = InventoryManager(db)
    success = await inventory_manager.add_potion_to_inventory(user_id, potion_id, 1)
    
    if not success:
        await update.callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑—ñ–ª–ª—è –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è!")
        return
    
    await update.callback_query.answer(
        f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {potion.name} –∑–∞ {potion.price:,} –∑–æ–ª–æ—Ç–∞!"
    )
    
    # Show updated potion shop
    await show_potion_shop(update, context)


async def use_potion(update: Update, context: ContextTypes.DEFAULT_TYPE, potion_id: str) -> None:
    """Use a potion from inventory"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    from game_logic.potion_manager import potion_manager
    
    potion = potion_manager.get_potion(potion_id)
    if not potion:
        await update.callback_query.answer("‚ùå –ó—ñ–ª–ª—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # Check if player has this potion
    conn = await db.get_connection()
    async with conn.execute('''
        SELECT quantity FROM player_equipment 
        WHERE user_id = ? AND item_id = ? AND item_type = 'consumable'
    ''', (user_id, potion_id)) as cursor:
        row = await cursor.fetchone()
    
    has_potion = row and row['quantity'] > 0
    
    if not has_potion:
        await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—å–æ–≥–æ –∑—ñ–ª–ª—è!")
        return
    
    # Apply potion effects
    char_dict = character.to_dict() if hasattr(character, 'to_dict') else character
    effects_result = potion_manager.apply_potion_effects(char_dict, potion)
    
    # Update character
    if effects_result['updates']:
        await db.update_character_by_id(user_id, effects_result['updates'])
    
    # Store temporary effects in context
    if effects_result['temp_effects']:
        if 'temp_effects' not in context.user_data:
            context.user_data['temp_effects'] = {}
        context.user_data['temp_effects'].update(effects_result['temp_effects'])
    
    # Remove potion from inventory
    inventory_manager = InventoryManager(db)
    success = await inventory_manager.remove_potion_from_inventory(user_id, potion_id, 1)
    
    if not success:
        await update.callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑—ñ–ª–ª—è –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è!")
        return
    
    # Update statistics
    await db.update_statistics_by_id(user_id, {'potions_used': 1})
    
    # Show effects message
    effects_text = "\n".join(effects_result['effects_text'])
    await update.callback_query.answer(
        f"üß™ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ {potion.name}!\n{effects_text}",
        show_alert=True
    )
    
    # Show updated potions management
    await show_potions_management(update, context)


async def buy_item(update: Update, context: ContextTypes.DEFAULT_TYPE, item_id: str) -> None:
    """Purchase an item"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    equipment_manager = EquipmentManager(db)
    inventory_manager = InventoryManager(db)
    
    item = equipment_manager.get_equipment_by_id(item_id)
    if not item:
        await update.callback_query.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # Check requirements
    if character.level < item.level_requirement:
        await update.callback_query.answer(
            f"‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä—ñ–≤–µ–Ω—å {item.level_requirement}!"
        )
        return
    
    if character.gold < item.base_price:
        await update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞!")
        return
    
    if not equipment_manager.check_equipment_compatibility(character.character_class, item_id):
        await update.callback_query.answer("‚ùå –¶–µ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –≤–∞—à–æ–º—É –∫–ª–∞—Å—É!")
        return
    
    # Deduct gold and add item
    try:
        conn = await db.get_connection()
        
        # Update character gold
        await conn.execute('''
            UPDATE characters SET gold = gold - ? WHERE user_id = ?
        ''', (item.base_price, user_id))
        
        # Add item to inventory
        await inventory_manager.add_item_to_inventory(user_id, item_id)
        
        await conn.commit()
        
        purchase_text = f"""
‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø—ñ—à–Ω–∞!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
–í–∏ –∫—É–ø–∏–ª–∏: **{item.name}**
üí∞ –ó–∞–ø–ª–∞—á–µ–Ω–æ: {item.base_price:,} –∑–æ–ª–æ—Ç–∞
üì¶ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è

        üí∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—è –∑–æ–ª–æ—Ç–∞: {int(character.gold - item.base_price):,}

–í–∏ –º–æ–∂–µ—Ç–µ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä.
"""
        
        keyboard = [
            [InlineKeyboardButton("üì¶ –í—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_main")],
            [InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="merchant_main")],
            [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            purchase_text, reply_markup=reply_markup, parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error purchasing item: {e}")
        await update.callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ!")


async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show character inventory and equipped items"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    inventory_manager = InventoryManager(db)
    equipment_manager = EquipmentManager(db)
    
    # Get equipment and stats
    equipment = await inventory_manager.get_character_equipment(user_id)
    stats = await inventory_manager.calculate_character_stats(user_id)
    
    inventory_text = f"""
üì¶ **–Ü–Ω–≤–µ–Ω—Ç–∞—Ä {character.name}**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –ó–æ–ª–æ—Ç–æ: {int(character.gold):,}

üë§ **–°–ø–æ—Ä—è–¥–∂–µ–Ω–æ:**
"""
    
    # Show equipped weapon
    if equipment.equipped_weapon:
        weapon = equipment_manager.get_equipment_by_id(equipment.equipped_weapon)
        if weapon:
            upgrade_text = f" +{equipment.weapon_upgrade_level}" if equipment.weapon_upgrade_level > 0 else ""
            inventory_text += f"‚öîÔ∏è –ó–±—Ä–æ—è: {weapon.name}{upgrade_text}\n"
            # Calculate stats with upgrade level from database
            current_attack = equipment_manager.calculate_upgrade_stats(weapon.base_stats.attack, equipment.weapon_upgrade_level)
            base_attack = weapon.base_stats.attack
            bonus_attack = current_attack - base_attack
            if bonus_attack > 0:
                inventory_text += f"   üìä –ê—Ç–∞–∫–∞: {base_attack} + {bonus_attack}\n"
            else:
                inventory_text += f"   üìä –ê—Ç–∞–∫–∞: {base_attack}\n"
    else:
        inventory_text += "‚öîÔ∏è –ó–±—Ä–æ—è: –ù–µ–º–∞—î\n"
    
    # Show equipped armor
    if equipment.equipped_armor:
        armor = equipment_manager.get_equipment_by_id(equipment.equipped_armor)
        if armor:
            upgrade_text = f" +{equipment.armor_upgrade_level}" if equipment.armor_upgrade_level > 0 else ""
            inventory_text += f"üõ°Ô∏è –ë—Ä–æ–Ω—è: {armor.name}{upgrade_text}\n"
            # Calculate stats with upgrade level from database
            current_defense = equipment_manager.calculate_upgrade_stats(armor.base_stats.defense, equipment.armor_upgrade_level)
            base_defense = armor.base_stats.defense
            bonus_defense = current_defense - base_defense
            if bonus_defense > 0:
                inventory_text += f"   üìä –ó–∞—Ö–∏—Å—Ç: {base_defense} + {bonus_defense}\n"
            else:
                inventory_text += f"   üìä –ó–∞—Ö–∏—Å—Ç: {base_defense}\n"
    else:
        inventory_text += "üõ°Ô∏è –ë—Ä–æ–Ω—è: –ù–µ–º–∞—î\n"
    
    # Show total stats
    if stats:
        inventory_text += f"""
üí™ **–ó–∞–≥–∞–ª—å–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
üó° –ê—Ç–∞–∫–∞: {stats.total_attack} ({stats.base_attack} + {stats.weapon_attack})
üõ° –ó–∞—Ö–∏—Å—Ç: {stats.total_defense} ({stats.base_defense} + {stats.armor_defense})
‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å: {stats.total_speed}
üéØ –ö—Ä–∏—Ç–∏—á–Ω–∏–π —É–¥–∞—Ä: {stats.total_crit_chance}%
üõ° –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è: {stats.total_block_chance}%
"""
    
    # Show inventory items
    inventory_text += "\nüìã **–ü—Ä–µ–¥–º–µ—Ç–∏ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ:**\n"
    
    if equipment.weapons:
        inventory_text += "‚öîÔ∏è **–ó–±—Ä–æ—è:**\n"
        for weapon_id, upgrade_level in equipment.weapons.items():
            weapon = equipment_manager.get_equipment_by_id(weapon_id)
            if weapon:
                upgrade_text = f" +{upgrade_level}" if upgrade_level > 0 else ""
                inventory_text += f"  ‚Ä¢ {weapon.name}{upgrade_text}\n"
    
    if equipment.armor:
        inventory_text += "üõ°Ô∏è **–ë—Ä–æ–Ω—è:**\n"
        for armor_id, upgrade_level in equipment.armor.items():
            armor = equipment_manager.get_equipment_by_id(armor_id)
            if armor:
                upgrade_text = f" +{upgrade_level}" if upgrade_level > 0 else ""
                inventory_text += f"  ‚Ä¢ {armor.name}{upgrade_text}\n"
    
    # Show materials
    if any(equipment.materials.values()):
        inventory_text += "\nüîß **–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:**\n"
        if equipment.materials["gods_stone"] > 0:
            inventory_text += f"üíé –ö–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤: {equipment.materials['gods_stone']}\n"
        if equipment.materials["mithril_dust"] > 0:
            inventory_text += f"‚ú® –ú—ñ—Ç—Ä–∏–ª–æ–≤–∞ –ø–∏–ª: {equipment.materials['mithril_dust']}\n"
        if equipment.materials["dragon_scale"] > 0:
            inventory_text += f"üêâ –î—Ä–∞–∫–æ–Ω—è—á–∞ –ª—É—Å–∫–∞: {equipment.materials['dragon_scale']}\n"
    
    if not equipment.weapons and not equipment.armor:
        inventory_text += "\nüîç –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π"
    
    # Add timestamp for message uniqueness
    import datetime
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    inventory_text += f"\n\nüïê –û–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}"
    
    keyboard = [
        [InlineKeyboardButton("‚öîÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–±—Ä–æ—î—é", callback_data="inventory_weapons")],
        [InlineKeyboardButton("üõ°Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—Ä–æ–Ω–µ—é", callback_data="inventory_armor")],
        [InlineKeyboardButton("üß™ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑—ñ–ª–ª—è–º", callback_data="inventory_potions")],
        [InlineKeyboardButton("‚öíÔ∏è –ö—É–∑–Ω—è (–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è)", callback_data="blacksmith_main")],
        [InlineKeyboardButton("üõí –î–æ —Ç–æ—Ä–≥–æ–≤—Ü—è", callback_data="merchant_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            inventory_text, reply_markup=reply_markup, parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            inventory_text, reply_markup=reply_markup, parse_mode='Markdown'
        )


async def show_blacksmith(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show blacksmith upgrade menu"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    inventory_manager = InventoryManager(db)
    equipment_manager = EquipmentManager(db)
    equipment = await inventory_manager.get_character_equipment(user_id)
    
    blacksmith_text = f"""
‚öíÔ∏è **–ö—É–∑–Ω—è –≥–Ω–æ–º–∞ –¢–æ—Ä—ñ–Ω–∞**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíé –ö–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤: {equipment.materials.get('gods_stone', 0)}
‚ú® –ú—ñ—Ç—Ä–∏–ª–æ–≤–∞ –ø–∏–ª: {equipment.materials.get('mithril_dust', 0)}
üêâ –î—Ä–∞–∫–æ–Ω—è—á–∞ –ª—É—Å–∫–∞: {equipment.materials.get('dragon_scale', 0)}
üí∞ –ó–æ–ª–æ—Ç–æ: {character.gold:,}

**–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:**
–ö–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤: {equipment.materials.get('gods_stone', 0)}
–ú—ñ—Ç—Ä–∏–ª–æ–≤–∞ –ø–∏–ª: {equipment.materials.get('mithril_dust', 0)}
–î—Ä–∞–∫–æ–Ω—è—á–∞ –ª—É—Å–∫–∞: {equipment.materials.get('dragon_scale', 0)}

–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:
"""
    
    keyboard = []
    
    # Show equipped weapon
    if equipment.equipped_weapon:
        weapon = equipment_manager.get_equipment_by_id(equipment.equipped_weapon)
        if weapon and equipment.weapon_upgrade_level < 40:
            cost = equipment_manager.get_upgrade_cost(equipment.weapon_upgrade_level)
            
            blacksmith_text += f"\nüó° **{weapon.name} +{equipment.weapon_upgrade_level}**\n"
            
            # Show current stats with upgrades
            current_attack = equipment_manager.calculate_upgrade_stats(weapon.base_stats.attack, equipment.weapon_upgrade_level)
            base_attack = weapon.base_stats.attack
            bonus_attack = current_attack - base_attack
            if bonus_attack > 0:
                blacksmith_text += f"   üìä –ü–æ—Ç–æ—á–Ω–∞ –∞—Ç–∞–∫–∞: {base_attack} + {bonus_attack} = {current_attack}\n"
            else:
                blacksmith_text += f"   üìä –ü–æ—Ç–æ—á–Ω–∞ –∞—Ç–∞–∫–∞: {base_attack}\n"
            
            # Show next level preview
            next_level = equipment.weapon_upgrade_level + 1
            next_attack = equipment_manager.calculate_upgrade_stats(base_attack, next_level)
            next_bonus = next_attack - base_attack
            blacksmith_text += f"   üìà –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å (+{next_level}): {base_attack} + {next_bonus} = {next_attack}\n"
            
            blacksmith_text += f"   üíé –ü–æ—Ç—Ä—ñ–±–Ω–æ: {cost.get('gods_stone', 0)} –∫–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤ (—É –≤–∞—Å: {equipment.materials.get('gods_stone', 0)})\n"
            blacksmith_text += f"   üí∞ –ü–æ—Ç—Ä—ñ–±–Ω–æ: {cost.get('gold', 0):,} –∑–æ–ª–æ—Ç–∞ (—É –≤–∞—Å: {character.gold:,})\n"
            blacksmith_text += f"   üéØ –®–∞–Ω—Å —É—Å–ø—ñ—Ö—É: {cost.get('success_rate', 0)}%\n"
            
            can_upgrade = (equipment.materials.get('gods_stone', 0) >= cost.get('gods_stone', 0) and 
                          character.gold >= cost.get('gold', 0))
            
            if can_upgrade:
                keyboard.append([InlineKeyboardButton(
                    f"‚öíÔ∏è –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –∑–±—Ä–æ—é (+{equipment.weapon_upgrade_level + 1})",
                    callback_data=f"upgrade_weapon_{equipment.equipped_weapon}"
                )])
    
    # Show equipped armor
    if equipment.equipped_armor:
        armor = equipment_manager.get_equipment_by_id(equipment.equipped_armor)
        if armor and equipment.armor_upgrade_level < 40:
            cost = equipment_manager.get_upgrade_cost(equipment.armor_upgrade_level)
            
            blacksmith_text += f"\nüõ° **{armor.name} +{equipment.armor_upgrade_level}**\n"
            
            # Show current stats with upgrades
            current_defense = equipment_manager.calculate_upgrade_stats(armor.base_stats.defense, equipment.armor_upgrade_level)
            base_defense = armor.base_stats.defense
            bonus_defense = current_defense - base_defense
            if bonus_defense > 0:
                blacksmith_text += f"   üìä –ü–æ—Ç–æ—á–Ω–∏–π –∑–∞—Ö–∏—Å—Ç: {base_defense} + {bonus_defense} = {current_defense}\n"
            else:
                blacksmith_text += f"   üìä –ü–æ—Ç–æ—á–Ω–∏–π –∑–∞—Ö–∏—Å—Ç: {base_defense}\n"
            
            # Show next level preview
            next_level = equipment.armor_upgrade_level + 1
            next_defense = equipment_manager.calculate_upgrade_stats(base_defense, next_level)
            next_bonus = next_defense - base_defense
            blacksmith_text += f"   üìà –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å (+{next_level}): {base_defense} + {next_bonus} = {next_defense}\n"
            
            blacksmith_text += f"   üíé –ü–æ—Ç—Ä—ñ–±–Ω–æ: {cost.get('gods_stone', 0)} –∫–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤ (—É –≤–∞—Å: {equipment.materials.get('gods_stone', 0)})\n"
            blacksmith_text += f"   üí∞ –ü–æ—Ç—Ä—ñ–±–Ω–æ: {cost.get('gold', 0):,} –∑–æ–ª–æ—Ç–∞ (—É –≤–∞—Å: {character.gold:,})\n"
            blacksmith_text += f"   üéØ –®–∞–Ω—Å —É—Å–ø—ñ—Ö—É: {cost.get('success_rate', 0)}%\n"
            
            can_upgrade = (equipment.materials.get('gods_stone', 0) >= cost.get('gods_stone', 0) and 
                          character.gold >= cost.get('gold', 0))
            
            if can_upgrade:
                keyboard.append([InlineKeyboardButton(
                    f"‚öíÔ∏è –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –±—Ä–æ–Ω—é (+{equipment.armor_upgrade_level + 1})",
                    callback_data=f"upgrade_armor_{equipment.equipped_armor}"
                )])
    
    if not keyboard:
        blacksmith_text += "\nüö´ –ù–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤."
    
    # Add timestamp for message uniqueness
    import datetime
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    
    blacksmith_text += f"""

üí° **–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏:**
‚Ä¢ üíé –ö–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤: 15% —à–∞–Ω—Å –∑ —É—Å—ñ—Ö –º–æ–Ω—Å—Ç—Ä—ñ–≤ + –¥–æ 3 –∑–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –ø—ñ–¥–∑–µ–º–µ–ª–ª—è
‚Ä¢ ‚ú® –ú—ñ—Ç—Ä–∏–ª–æ–≤–∞ –ø–∏–ª: –±–æ—Å–∏ (25%), –¥—Ä–∞–∫–æ–Ω–∏ (35%), —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –≤–æ—Ä–æ–≥–∏ (—Ä—ñ–≤–µ–Ω—å 10+)
‚Ä¢ üêâ –î—Ä–∞–∫–æ–Ω—è—á–∞ –ª—É—Å–∫–∞: –¥—Ä–µ–≤–Ω—ñ –¥—Ä–∞–∫–æ–Ω–∏ (5% —à–∞–Ω—Å)

üïê –û–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}
"""
    
    keyboard.extend([
        [InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        blacksmith_text, reply_markup=reply_markup, parse_mode='Markdown'
    )


async def equipment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle equipment-related callbacks"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "merchant_main":
        await show_merchant_menu(update, context)
    
    elif data == "merchant_weapons":
        await show_weapon_shop(update, context)
    
    elif data == "merchant_armor":
        await show_armor_shop(update, context)
    
    elif data == "merchant_potions":
        await show_potion_shop(update, context)
    
    elif data.startswith("buy_weapon_"):
        item_id = data.replace("buy_weapon_", "")
        await buy_item(update, context, item_id)
    
    elif data.startswith("buy_armor_"):
        item_id = data.replace("buy_armor_", "")
        await buy_item(update, context, item_id)
    
    elif data.startswith("buy_potion_"):
        potion_id = data.replace("buy_potion_", "")
        await buy_potion(update, context, potion_id)
    
    elif data.startswith("use_potion_"):
        potion_id = data.replace("use_potion_", "")
        await use_potion(update, context, potion_id)
    
    elif data == "inventory_main":
        await show_inventory(update, context)
    
    elif data == "inventory_weapons":
        await show_weapons_management(update, context)
    
    elif data == "inventory_armor":
        await show_armor_management(update, context)
    
    elif data == "inventory_potions":
        await show_potions_management(update, context)
    
    elif data.startswith("equip_weapon_"):
        item_id = data.replace("equip_weapon_", "")
        await equip_weapon(update, context, item_id)
    
    elif data.startswith("equip_armor_"):
        item_id = data.replace("equip_armor_", "")
        await equip_armor(update, context, item_id)
    
    elif data.startswith("unequip_weapon"):
        await unequip_weapon(update, context)
    
    elif data.startswith("unequip_armor"):
        await unequip_armor(update, context)
    
    elif data.startswith("sell_weapon_"):
        item_id = data.replace("sell_weapon_", "")
        await sell_weapon(update, context, item_id)
    
    elif data.startswith("sell_armor_"):
        item_id = data.replace("sell_armor_", "")
        await sell_armor(update, context, item_id)
    
    elif data == "blacksmith_main":
        await show_blacksmith(update, context)
    
    elif data == "tavern_blacksmith":
        await show_blacksmith(update, context)
    
    elif data.startswith("upgrade_weapon_"):
        item_id = data.replace("upgrade_weapon_", "")
        await upgrade_equipment(update, context, item_id, "weapon")
    
    elif data.startswith("upgrade_armor_"):
        item_id = data.replace("upgrade_armor_", "")
        await upgrade_equipment(update, context, item_id, "armor")
    
    else:
        await query.edit_message_text(f"üöß –§—É–Ω–∫—Ü—ñ—è '{data}' –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")


async def upgrade_equipment(update: Update, context: ContextTypes.DEFAULT_TYPE, item_id: str, item_type: str) -> None:
    """Upgrade equipped item"""
    
    try:
        user_id = update.effective_user.id
        inventory_manager = InventoryManager(db)
        equipment_manager = EquipmentManager(db)
        
        # Add timeout protection
        import asyncio
        result = await asyncio.wait_for(
            inventory_manager.upgrade_item(user_id, item_id, item_type),
            timeout=10.0  # 10 second timeout
        )
        
        if result["success"]:
            item = equipment_manager.get_equipment_by_id(item_id)
            
            upgrade_text = f"""
‚úÖ **–ü–û–ö–†–ê–©–ï–ù–ù–Ø –£–°–ü–Ü–®–ù–ï!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéâ {item.name} –ø–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ —Ä—ñ–≤–Ω—è +{result["new_level"]}!

üíé –í–∏—Ç—Ä–∞—á–µ–Ω–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤:
‚Ä¢ –ö–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤: {result["materials_used"]["gods_stone"]}
‚Ä¢ –ó–æ–ª–æ—Ç–æ: {result["materials_used"]["gold"]:,}

‚ú® –í–∞—à –ø—Ä–µ–¥–º–µ—Ç —Å—Ç–∞–≤ —Å–∏–ª—å–Ω—ñ—à–∏–º!
"""
        else:
            reason_messages = {
                "character_not_found": "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
                "item_not_equipped": "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ!",
                "max_upgrade": "‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (+40)!",
                "insufficient_gods_stone": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤!",
                "insufficient_gold": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞!",
                "upgrade_failed": "üí• –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è!",
                "database_error": "‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!"
            }
            
            upgrade_text = f"""
‚ùå **–ü–û–ö–†–ê–©–ï–ù–ù–Ø –ù–ï –í–î–ê–õ–û–°–Ø**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{reason_messages.get(result["reason"], "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")}
"""
            
            if result["reason"] == "upgrade_failed":
                upgrade_text += f"""
üíî –ù–∞ –∂–∞–ª—å, –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—è...

üíé –í–∏—Ç—Ä–∞—á–µ–Ω–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤:
‚Ä¢ –ö–∞–º—ñ–Ω–Ω—è –±–æ–≥—ñ–≤: {result["materials_used"]["gods_stone"]}
‚Ä¢ –ó–æ–ª–æ—Ç–æ: {result["materials_used"]["gold"]:,}

üçÄ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑! –£–¥–∞—á–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —É—Å–º—ñ—Ö–Ω–µ—Ç—å—Å—è!
"""
        
        keyboard = [
            [InlineKeyboardButton("‚öíÔ∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="blacksmith_main")],
            [InlineKeyboardButton("üì¶ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory_main")],
            [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            upgrade_text, reply_markup=reply_markup, parse_mode='Markdown'
        )
    
    except asyncio.TimeoutError:
        error_text = """
‚è∞ **–¢–ê–ô–ú–ê–£–¢ –û–ü–ï–†–ê–¶–Ü–á**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–∞–π–Ω—è–ª–∞ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É.

üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="blacksmith_main")],
            [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            error_text, reply_markup=reply_markup, parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"Error upgrading equipment: {e}")
        error_text = f"""
‚ùå **–ü–û–ú–ò–õ–ö–ê –ü–†–ò –ü–û–ö–†–ê–©–ï–ù–ù–Ü**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí• –°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}

üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", callback_data="blacksmith_main")],
            [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            error_text, reply_markup=reply_markup, parse_mode='Markdown'
        )


async def show_weapons_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show weapons management interface"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    inventory_manager = InventoryManager(db)
    equipment_manager = EquipmentManager(db)
    equipment = await inventory_manager.get_character_equipment(user_id)
    
    weapons_text = f"""
‚öîÔ∏è **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–±—Ä–æ—î—é**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {character.name}
üí∞ –ó–æ–ª–æ—Ç–æ: {int(character.gold):,}

"""
    
    keyboard = []
    
    # Show equipped weapon
    if equipment.equipped_weapon:
        weapon = equipment_manager.get_equipment_by_id(equipment.equipped_weapon)
        if weapon:
            upgrade_text = f" +{equipment.weapon_upgrade_level}" if equipment.weapon_upgrade_level > 0 else ""
            # Calculate stats with upgrade level from database
            current_attack = equipment_manager.calculate_upgrade_stats(weapon.base_stats.attack, equipment.weapon_upgrade_level)
            
            weapons_text += f"üó°Ô∏è **–°–ø–æ—Ä—è–¥–∂–µ–Ω–æ:**\n"
            weapons_text += f"   **{weapon.name}{upgrade_text}**\n"
            base_attack = weapon.base_stats.attack
            bonus_attack = current_attack - base_attack
            if bonus_attack > 0:
                weapons_text += f"   üìä –ê—Ç–∞–∫–∞: {base_attack} + {bonus_attack}\n"
            else:
                weapons_text += f"   üìä –ê—Ç–∞–∫–∞: {base_attack}\n"
            weapons_text += f"   üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—É: {equipment_manager.calculate_sell_price(weapon.id, equipment.weapon_upgrade_level):,} –∑–æ–ª–æ—Ç–∞\n\n"
            
            keyboard.append([InlineKeyboardButton("‚ùå –†–æ–∑–µ–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ –∑–±—Ä–æ—é", callback_data="unequip_weapon")])
    else:
        weapons_text += "üó°Ô∏è **–°–ø–æ—Ä—è–¥–∂–µ–Ω–æ:** –ù–µ–º–∞—î\n\n"
    
    # Show weapons in inventory
    if equipment.weapons:
        weapons_text += "üì¶ **–ó–±—Ä–æ—è –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ:**\n"
        for weapon_id, upgrade_level in equipment.weapons.items():
            weapon = equipment_manager.get_equipment_by_id(weapon_id)
            if weapon:
                upgrade_text = f" +{upgrade_level}" if upgrade_level > 0 else ""
                sell_price = equipment_manager.calculate_sell_price(weapon_id, upgrade_level)
                
                weapons_text += f"   ‚Ä¢ **{weapon.name}{upgrade_text}**\n"
                # Calculate stats with upgrade level from database
                current_attack = equipment_manager.calculate_upgrade_stats(weapon.base_stats.attack, upgrade_level)
                base_attack = weapon.base_stats.attack
                bonus_attack = current_attack - base_attack
                if bonus_attack > 0:
                    weapons_text += f"     üìä –ê—Ç–∞–∫–∞: {base_attack} + {bonus_attack}\n"
                else:
                    weapons_text += f"     üìä –ê—Ç–∞–∫–∞: {base_attack}\n"
                weapons_text += f"     üí∞ –ü—Ä–æ–¥–∞–∂–∞: {sell_price:,} –∑–æ–ª–æ—Ç–∞\n"
                
                # Add action buttons
                keyboard.append([
                    InlineKeyboardButton(f"‚úÖ –ï–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ {weapon.name}", callback_data=f"equip_weapon_{weapon_id}"),
                    InlineKeyboardButton(f"üí∞ –ü—Ä–æ–¥–∞—Ç–∏ ({sell_price:,})", callback_data=f"sell_weapon_{weapon_id}")
                ])
        weapons_text += "\n"
    else:
        weapons_text += "üì¶ **–ó–±—Ä–æ—è –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ:** –ù–µ–º–∞—î\n\n"
    
    # Add timestamp for message uniqueness
    import datetime
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    
    weapons_text += "üí° **–ü—ñ–¥–∫–∞–∑–∫–∏:**\n"
    weapons_text += "‚Ä¢ –ï–∫—ñ–ø—ñ—Ä—É–π—Ç–µ –∫—Ä–∞—â—É –∑–±—Ä–æ—é –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∞—Ç–∞–∫–∏\n"
    weapons_text += "‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—É –∑–±—Ä–æ—é –∑–∞ –∑–æ–ª–æ—Ç–æ\n"
    weapons_text += "‚Ä¢ –ü–æ–∫—Ä–∞—â—É–π—Ç–µ –∑–±—Ä–æ—é –≤ –∫—É–∑–Ω—ñ –¥–ª—è –±—ñ–ª—å—à–æ—ó —Å–∏–ª–∏\n"
    weapons_text += f"\nüïê –û–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}"
    
    keyboard.extend([
        [InlineKeyboardButton("üõ°Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—Ä–æ–Ω–µ—é", callback_data="inventory_armor")],
        [InlineKeyboardButton("üì¶ –ù–∞–∑–∞–¥ –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è", callback_data="inventory_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        weapons_text, reply_markup=reply_markup, parse_mode='Markdown'
    )


async def show_armor_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show armor management interface"""
    
    user_id = update.effective_user.id
    character = await db.get_character(user_id)
    
    if not character:
        await update.callback_query.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    inventory_manager = InventoryManager(db)
    equipment_manager = EquipmentManager(db)
    equipment = await inventory_manager.get_character_equipment(user_id)
    
    armor_text = f"""
üõ°Ô∏è **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—Ä–æ–Ω–µ—é**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {character.name}
üí∞ –ó–æ–ª–æ—Ç–æ: {int(character.gold):,}

"""
    
    keyboard = []
    
    # Show equipped armor
    if equipment.equipped_armor:
        armor = equipment_manager.get_equipment_by_id(equipment.equipped_armor)
        if armor:
            upgrade_text = f" +{equipment.armor_upgrade_level}" if equipment.armor_upgrade_level > 0 else ""
            # Calculate stats with upgrade level from database
            current_defense = equipment_manager.calculate_upgrade_stats(armor.base_stats.defense, equipment.armor_upgrade_level)
            
            armor_text += f"üõ°Ô∏è **–°–ø–æ—Ä—è–¥–∂–µ–Ω–æ:**\n"
            armor_text += f"   **{armor.name}{upgrade_text}**\n"
            base_defense = armor.base_stats.defense
            bonus_defense = current_defense - base_defense
            if bonus_defense > 0:
                armor_text += f"   üìä –ó–∞—Ö–∏—Å—Ç: {base_defense} + {bonus_defense}\n"
            else:
                armor_text += f"   üìä –ó–∞—Ö–∏—Å—Ç: {base_defense}\n"
            armor_text += f"   üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—É: {equipment_manager.calculate_sell_price(armor.id, equipment.armor_upgrade_level):,} –∑–æ–ª–æ—Ç–∞\n\n"
            
            keyboard.append([InlineKeyboardButton("‚ùå –†–æ–∑–µ–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é", callback_data="unequip_armor")])
    else:
        armor_text += "üõ°Ô∏è **–°–ø–æ—Ä—è–¥–∂–µ–Ω–æ:** –ù–µ–º–∞—î\n\n"
    
    # Show armor in inventory
    if equipment.armor:
        armor_text += "üì¶ **–ë—Ä–æ–Ω—è –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ:**\n"
        for armor_id, upgrade_level in equipment.armor.items():
            armor = equipment_manager.get_equipment_by_id(armor_id)
            if armor:
                upgrade_text = f" +{upgrade_level}" if upgrade_level > 0 else ""
                sell_price = equipment_manager.calculate_sell_price(armor_id, upgrade_level)
                
                armor_text += f"   ‚Ä¢ **{armor.name}{upgrade_text}**\n"
                # Calculate stats with upgrade level from database
                current_defense = equipment_manager.calculate_upgrade_stats(armor.base_stats.defense, upgrade_level)
                base_defense = armor.base_stats.defense
                bonus_defense = current_defense - base_defense
                if bonus_defense > 0:
                    armor_text += f"     üìä –ó–∞—Ö–∏—Å—Ç: {base_defense} + {bonus_defense}\n"
                else:
                    armor_text += f"     üìä –ó–∞—Ö–∏—Å—Ç: {base_defense}\n"
                armor_text += f"     üí∞ –ü—Ä–æ–¥–∞–∂–∞: {sell_price:,} –∑–æ–ª–æ—Ç–∞\n"
                
                # Add action buttons
                keyboard.append([
                    InlineKeyboardButton(f"‚úÖ –ï–∫—ñ–ø—ñ—Ä—É–≤–∞—Ç–∏ {armor.name}", callback_data=f"equip_armor_{armor_id}"),
                    InlineKeyboardButton(f"üí∞ –ü—Ä–æ–¥–∞—Ç–∏ ({sell_price:,})", callback_data=f"sell_armor_{armor_id}")
                ])
        armor_text += "\n"
    else:
        armor_text += "üì¶ **–ë—Ä–æ–Ω—è –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ:** –ù–µ–º–∞—î\n\n"
    
    # Add timestamp for message uniqueness
    import datetime
    timestamp = datetime.datetime.now().strftime("%H:%M:%S")
    
    armor_text += "üí° **–ü—ñ–¥–∫–∞–∑–∫–∏:**\n"
    armor_text += "‚Ä¢ –ï–∫—ñ–ø—ñ—Ä—É–π—Ç–µ –∫—Ä–∞—â—É –±—Ä–æ–Ω—é –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É\n"
    armor_text += "‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—É –±—Ä–æ–Ω—é –∑–∞ –∑–æ–ª–æ—Ç–æ\n"
    armor_text += "‚Ä¢ –ü–æ–∫—Ä–∞—â—É–π—Ç–µ –±—Ä–æ–Ω—é –≤ –∫—É–∑–Ω—ñ –¥–ª—è –±—ñ–ª—å—à–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É\n"
    armor_text += f"\nüïê –û–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}"
    
    keyboard.extend([
        [InlineKeyboardButton("‚öîÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–±—Ä–æ—î—é", callback_data="inventory_weapons")],
        [InlineKeyboardButton("üì¶ –ù–∞–∑–∞–¥ –¥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è", callback_data="inventory_main")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        armor_text, reply_markup=reply_markup, parse_mode='Markdown'
    )


async def equip_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE, item_id: str) -> None:
    """Equip a weapon from inventory"""
    
    user_id = update.effective_user.id
    inventory_manager = InventoryManager(db)
    equipment_manager = EquipmentManager(db)
    
    # Get weapon details for better error messages
    weapon = equipment_manager.get_equipment_by_id(item_id)
    weapon_name = weapon.name if weapon else "–ø—Ä–µ–¥–º–µ—Ç"
    
    result = await inventory_manager.equip_item(user_id, item_id)
    
    if result["success"]:
        await update.callback_query.answer(f"‚úÖ {weapon_name} –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ!", show_alert=True)
        await show_weapons_management(update, context)
    else:
        error_messages = {
            "item_not_found": f"‚ùå {weapon_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!",
            "character_not_found": "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
            "class_incompatible": f"‚ùå {weapon_name} –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –≤–∞—à–æ–º—É –∫–ª–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
            "level_requirement": f"‚ùå {weapon_name} –ø–æ—Ç—Ä–µ–±—É—î –≤–∏—â–∏–π —Ä—ñ–≤–µ–Ω—å!",
            "item_not_in_inventory": f"‚ùå {weapon_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!",
            "database_error": "‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!"
        }
        
        error_msg = error_messages.get(result["reason"], f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∑ {weapon_name}!")
        await update.callback_query.answer(error_msg, show_alert=True)
        logger.warning(f"Equip weapon failed for user {user_id}, item {item_id}: {result}")


async def equip_armor(update: Update, context: ContextTypes.DEFAULT_TYPE, item_id: str) -> None:
    """Equip armor from inventory"""
    
    user_id = update.effective_user.id
    inventory_manager = InventoryManager(db)
    equipment_manager = EquipmentManager(db)
    
    # Get armor details for better error messages
    armor = equipment_manager.get_equipment_by_id(item_id)
    armor_name = armor.name if armor else "–ø—Ä–µ–¥–º–µ—Ç"
    
    result = await inventory_manager.equip_item(user_id, item_id)
    
    if result["success"]:
        await update.callback_query.answer(f"‚úÖ {armor_name} –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ!", show_alert=True)
        await show_armor_management(update, context)
    else:
        error_messages = {
            "item_not_found": f"‚ùå {armor_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!",
            "character_not_found": "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
            "class_incompatible": f"‚ùå {armor_name} –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –≤–∞—à–æ–º—É –∫–ª–∞—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
            "level_requirement": f"‚ùå {armor_name} –ø–æ—Ç—Ä–µ–±—É—î –≤–∏—â–∏–π —Ä—ñ–≤–µ–Ω—å!",
            "item_not_in_inventory": f"‚ùå {armor_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!",
            "database_error": "‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!"
        }
        
        error_msg = error_messages.get(result["reason"], f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∑ {armor_name}!")
        await update.callback_query.answer(error_msg, show_alert=True)
        logger.warning(f"Equip armor failed for user {user_id}, item {item_id}: {result}")


async def unequip_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Unequip current weapon"""
    
    user_id = update.effective_user.id
    inventory_manager = InventoryManager(db)
    
    # Get current equipment
    equipment = await inventory_manager.get_character_equipment(user_id)
    
    if not equipment.equipped_weapon:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –∑–±—Ä–æ—ó –¥–ª—è —Ä–æ–∑–µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è!")
        return
    
    try:
        # Add current weapon to inventory
        await inventory_manager.add_item_to_inventory(user_id, equipment.equipped_weapon, equipment.weapon_upgrade_level)
        
        # Remove weapon from character (update both old and new fields for compatibility)
        conn = await db.get_connection()
        await conn.execute('''
            UPDATE characters 
            SET weapon = NULL, weapon_upgrade_level = 0,
                equipped_weapon = NULL
            WHERE user_id = ?
        ''', (user_id,))
        await conn.commit()
        
        await update.callback_query.answer("‚úÖ –ó–±—Ä–æ—é —Ä–æ–∑–µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ!", show_alert=True)
        await show_weapons_management(update, context)
        
    except Exception as e:
        logger.error(f"Error unequipping weapon: {e}")
        await update.callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–µ–∫—ñ–ø—ñ—Ä–æ–≤—Ü—ñ!")


async def unequip_armor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Unequip current armor"""
    
    user_id = update.effective_user.id
    inventory_manager = InventoryManager(db)
    
    # Get current equipment
    equipment = await inventory_manager.get_character_equipment(user_id)
    
    if not equipment.equipped_armor:
        await update.callback_query.answer("‚ùå –ù–µ–º–∞—î –±—Ä–æ–Ω—ñ –¥–ª—è —Ä–æ–∑–µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è!")
        return
    
    try:
        # Add current armor to inventory
        await inventory_manager.add_item_to_inventory(user_id, equipment.equipped_armor, equipment.armor_upgrade_level)
        
        # Remove armor from character (update both old and new fields for compatibility)
        conn = await db.get_connection()
        await conn.execute('''
            UPDATE characters 
            SET armor = NULL, armor_upgrade_level = 0,
                equipped_armor = NULL
            WHERE user_id = ?
        ''', (user_id,))
        await conn.commit()
        
        await update.callback_query.answer("‚úÖ –ë—Ä–æ–Ω—é —Ä–æ–∑–µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ!", show_alert=True)
        await show_armor_management(update, context)
        
    except Exception as e:
        logger.error(f"Error unequipping armor: {e}")
        await update.callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–µ–∫—ñ–ø—ñ—Ä–æ–≤—Ü—ñ!")


async def sell_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE, item_id: str) -> None:
    """Sell a weapon from inventory"""
    
    user_id = update.effective_user.id
    inventory_manager = InventoryManager(db)
    
    result = await inventory_manager.sell_item(user_id, item_id)
    
    if result["success"]:
        gold_earned = result["gold_earned"]
        await update.callback_query.answer(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ –∑–∞ {gold_earned:,} –∑–æ–ª–æ—Ç–∞!", show_alert=True)
        await show_weapons_management(update, context)
    else:
        error_messages = {
            "item_not_found": "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!",
            "database_error": "‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!"
        }
        
        error_msg = error_messages.get(result["reason"], "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞!")
        await update.callback_query.answer(error_msg)


async def sell_armor(update: Update, context: ContextTypes.DEFAULT_TYPE, item_id: str) -> None:
    """Sell armor from inventory"""
    
    user_id = update.effective_user.id
    inventory_manager = InventoryManager(db)
    
    result = await inventory_manager.sell_item(user_id, item_id)
    
    if result["success"]:
        gold_earned = result["gold_earned"]
        await update.callback_query.answer(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ –∑–∞ {gold_earned:,} –∑–æ–ª–æ—Ç–∞!", show_alert=True)
        await show_armor_management(update, context)
    else:
        error_messages = {
            "item_not_found": "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ!",
            "database_error": "‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!"
        }
        
        error_msg = error_messages.get(result["reason"], "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞!")
        await update.callback_query.answer(error_msg)
