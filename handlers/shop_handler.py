"""
Shop handler - manages shop and trading
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from database.db_manager import DatabaseManager
import config

logger = logging.getLogger(__name__)
db = DatabaseManager(config.DATABASE_URL)


# Shop items data (simplified version)
SHOP_ITEMS = {
    'weapons': {
        'iron_sword': {'name': '–ó–∞–ª—ñ–∑–Ω–∏–π –º–µ—á', 'price': 100, 'attack': 15, 'level_req': 1},
        'steel_sword': {'name': '–°—Ç–∞–ª–µ–≤–∏–π –º–µ—á', 'price': 250, 'attack': 22, 'level_req': 3},
        'magic_staff': {'name': '–ú–∞–≥—ñ—á–Ω–∏–π –ø–æ—Å–æ—Ö', 'price': 200, 'attack': 12, 'magic_power': 20, 'level_req': 1},
        'elven_bow': {'name': '–ï–ª—å—Ñ—ñ–π—Å—å–∫–∏–π –ª—É–∫', 'price': 300, 'attack': 18, 'critical_chance': 5, 'level_req': 3}
    },
    'armor': {
        'leather_armor': {'name': '–®–∫—ñ—Ä—è–Ω–∞ –±—Ä–æ–Ω—è', 'price': 60, 'defense': 6, 'level_req': 1},
        'chainmail': {'name': '–ö–æ–ª—å—á—É–≥–∞', 'price': 150, 'defense': 12, 'level_req': 3},
        'plate_armor': {'name': '–õ–∞—Ç–Ω–∞ –±—Ä–æ–Ω—è', 'price': 300, 'defense': 20, 'level_req': 5},
        'mage_robe': {'name': '–ú–∞–Ω—Ç—ñ—è –º–∞–≥–∞', 'price': 180, 'defense': 8, 'mana': 40, 'level_req': 1}
    },
    'potions': {
        'health_potion_small': {'name': '–ú–∞–ª–µ –∑—ñ–ª–ª—è –∑–¥–æ—Ä–æ–≤\'—è', 'price': 20, 'health': 40, 'consumable': True},
        'health_potion': {'name': '–ó—ñ–ª–ª—è –∑–¥–æ—Ä–æ–≤\'—è', 'price': 50, 'health': 80, 'consumable': True},
        'health_potion_large': {'name': '–í–µ–ª–∏–∫–µ –∑—ñ–ª–ª—è –∑–¥–æ—Ä–æ–≤\'—è', 'price': 100, 'health': 150, 'consumable': True},
        'mana_potion': {'name': '–ó—ñ–ª–ª—è –º–∞–Ω–∏', 'price': 40, 'mana': 60, 'consumable': True}
    }
}


async def show_shop_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, character: dict) -> None:
    """Show shop menu"""
    
    shop_text = f"""
üõí **–¢–æ—Ä–≥–æ–≤–µ—Ü—å –¢–æ—Ä—ñ–Ω –ö–∞–º'—è–Ω–æ–±–æ—Ä–æ–¥**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É, –≤–æ—ó–Ω–µ!"

üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {character['gold']}

–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?
"""
    
    keyboard = [
        [InlineKeyboardButton("‚öîÔ∏è –ó–±—Ä–æ—è", callback_data="shop_category_weapons")],
        [InlineKeyboardButton("üõ° –ë—Ä–æ–Ω—è", callback_data="shop_category_armor")],
        [InlineKeyboardButton("üß™ –ó—ñ–ª–ª—è", callback_data="shop_category_potions")],
        [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏", callback_data="shop_sell")],
        [InlineKeyboardButton("üèõ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        shop_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def shop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle shop callbacks"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data = query.data
    
    # Get character
    character = await db.get_character(user_id)
    if not character:
        await query.edit_message_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return
    
    if data == "shop_main":
        await show_shop_menu(update, context, character)
    
    elif data.startswith("shop_category_"):
        category = data.replace("shop_category_", "")
        await show_shop_category(update, context, character, category)
    
    elif data.startswith("shop_buy_"):
        item_data = data.replace("shop_buy_", "")
        category, item_id = item_data.split("_", 1)
        await buy_item(update, context, character, category, item_id)
    
    elif data == "shop_sell":
        await show_sell_menu(update, context, character)


async def show_shop_category(update: Update, context: ContextTypes.DEFAULT_TYPE, character: dict, category: str) -> None:
    """Show items in category"""
    
    category_names = {
        'weapons': '‚öîÔ∏è –ó–±—Ä–æ—è',
        'armor': 'üõ° –ë—Ä–æ–Ω—è',
        'potions': 'üß™ –ó—ñ–ª–ª—è'
    }
    
    if category not in SHOP_ITEMS:
        return
    
    category_text = f"""
üõí **{category_names[category]}**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {character['gold']}

–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏:
"""
    
    keyboard = []
    items = SHOP_ITEMS[category]
    
    for item_id, item_data in items.items():
        # Check level requirement
        level_req = item_data.get('level_req', 1)
        can_use = character['level'] >= level_req
        can_afford = character['gold'] >= item_data['price']
        
        # Build item description
        item_desc = f"{item_data['name']} - {item_data['price']}üí∞"
        
        if 'attack' in item_data:
            item_desc += f" (–ê—Ç–∞–∫–∞ +{item_data['attack']})"
        if 'defense' in item_data:
            item_desc += f" (–ó–∞—Ö–∏—Å—Ç +{item_data['defense']})"
        if 'health' in item_data:
            item_desc += f" (–ó–¥–æ—Ä–æ–≤'—è +{item_data['health']})"
        if 'mana' in item_data:
            item_desc += f" (–ú–∞–Ω–∞ +{item_data['mana']})"
        
        if not can_use:
            item_desc = f"üîí {item_desc} (–†—ñ–≤–µ–Ω—å {level_req})"
        elif not can_afford:
            item_desc = f"‚ùå {item_desc}"
        else:
            item_desc = f"‚úÖ {item_desc}"
        
        if can_use and can_afford:
            keyboard.append([InlineKeyboardButton(
                item_desc,
                callback_data=f"shop_buy_{category}_{item_id}"
            )])
        else:
            keyboard.append([InlineKeyboardButton(
                item_desc,
                callback_data="shop_locked"
            )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data="shop_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        category_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def buy_item(update: Update, context: ContextTypes.DEFAULT_TYPE, character: dict, category: str, item_id: str) -> None:
    """Buy an item"""
    
    if category not in SHOP_ITEMS or item_id not in SHOP_ITEMS[category]:
        await update.callback_query.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return
    
    item = SHOP_ITEMS[category][item_id]
    
    # Check gold
    if character['gold'] < item['price']:
        await update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞!", show_alert=True)
        return
    
    # Check level requirement
    level_req = item.get('level_req', 1)
    if character['level'] < level_req:
        await update.callback_query.answer(f"‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä—ñ–≤–µ–Ω—å {level_req}!", show_alert=True)
        return
    
    # Process purchase
    character['gold'] -= item['price']
    
    # Apply item effects
    updates = {'gold': character['gold']}
    
    if item.get('consumable'):
        # Add to inventory for consumables
        await db.add_to_inventory(character['user_id'], item_id, 1)
        purchase_type = "–¥–æ–¥–∞–Ω–æ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä"
    else:
        # Equip weapon/armor
        if category == 'weapons':
            old_weapon = character['weapon']
            character['weapon'] = item_id
            updates['weapon'] = item_id
            
            # Apply stat bonuses
            if 'attack' in item:
                character['attack'] += item['attack']
                updates['attack'] = character['attack']
            if 'magic_power' in item:
                character['magic_power'] += item['magic_power']
                updates['magic_power'] = character['magic_power']
            if 'critical_chance' in item:
                character['critical_chance'] += item['critical_chance']
                updates['critical_chance'] = character['critical_chance']
            
            purchase_type = "–µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ"
            
        elif category == 'armor':
            old_armor = character['armor']
            character['armor'] = item_id
            updates['armor'] = item_id
            
            # Apply stat bonuses
            if 'defense' in item:
                character['defense'] += item['defense']
                updates['defense'] = character['defense']
            if 'mana' in item:
                character['max_mana'] += item['mana']
                character['mana'] = character['max_mana']
                updates['max_mana'] = character['max_mana']
                updates['mana'] = character['mana']
            
            purchase_type = "–µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ"
    
    # Update character
    await db.update_character(character['user_id'], updates)
    
    # Update statistics
    await db.update_statistics(character['user_id'], {'gold_spent': item['price']})
    
    purchase_text = f"""
‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø—ñ—à–Ω–∞!**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
–í–∏ –∫—É–ø–∏–ª–∏: **{item['name']}**
–ó–∞–ø–ª–∞—á–µ–Ω–æ: {item['price']} –∑–æ–ª–æ—Ç–∞
–°—Ç–∞—Ç—É—Å: {purchase_type}

üí∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—è –∑–æ–ª–æ—Ç–∞: {character['gold']}
"""
    
    keyboard = [
        [InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data=f"shop_category_{category}")],
        [InlineKeyboardButton("üèõ –î–æ —Ç–∞–≤–µ—Ä–Ω–∏", callback_data="tavern_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        purchase_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def show_sell_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, character: dict) -> None:
    """Show sell menu"""
    
    inventory = await db.get_inventory(character['user_id'])
    
    sell_text = f"""
üí∞ **–ü—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {character['gold']}

–©–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏?
"""
    
    keyboard = []
    
    if inventory:
        for item_data in inventory:
            item_id = item_data['item_id']
            quantity = item_data['quantity']
            
            # Find item in shop data
            item_info = None
            for category in SHOP_ITEMS.values():
                if item_id in category:
                    item_info = category[item_id]
                    break
            
            if item_info:
                sell_price = item_info['price'] // 2  # Sell for half price
                button_text = f"{item_info['name']} x{quantity} - {sell_price}üí∞"
                keyboard.append([InlineKeyboardButton(
                    button_text,
                    callback_data=f"shop_sell_item_{item_id}"
                )])
    else:
        sell_text += "\nüîç –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É"
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", callback_data="shop_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        sell_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )